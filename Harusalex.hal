external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable();
external inner function Boolean IsCloudControllerClient();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner procedure JobRClass_RUS();
external inner function string 60 UserDefined(string,string);
external outer function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
remote function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();
// in-apps
external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions ENG
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabelENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_ENG();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ENG(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DisplayRecordDetailsRA_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

// Language functions ARB
external inner function Boolean DisplayLoginKeyPad_ARB();
external inner function string 255 VATZoneEditFieldLabelARB(Integer);
external inner function real VATZoneButtonsLabelsARB(real,real,real,real);
external inner procedure LoginButtons2_ARB(Real,Real);
external inner procedure FORMDEF_ARB();
external inner function string 255 DemoMsgWClassTitle_ARB(Boolean,Boolean);
external inner procedure TBEClassDef_ARB();
external inner function string 255 VATZoneNameARB();
external inner procedure TSERW_ARB();
external inner procedure TSERWNT_ARB();
external inner procedure TSERWTouch_ARB();
external inner procedure TSERWTEST_ARB();
external inner procedure INVFORM_ARB(Boolean);
external inner procedure DisplayRecordDetails_ARB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ARB(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ARB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ARB();
external inner function string 255 ResMonWClassWindowTitle_ARB();
external inner function string 255 RTMonWClassWindowTitle_ARB();
external inner procedure SetupNightAuditWindowControls_ARB(Boolean);
external inner procedure CURClassDefinitionARB();
external inner function real DrawPaymentModesButtons_IV_ARB(real);
external inner function real FunctionButtons_ARB(string);
external inner procedure CreditCardWindowHeader_ARB(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ARB(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ARB(Real);
external inner procedure CreditCardWindowDeliveryDetail_ARB(Real);
external inner function real DrawPaymentModesButtons_ARB();
external inner procedure DrawBarMenuTiles_ARB(string);
external inner procedure DrawRestPMOtherPay_ARB();
external inner procedure DisplayRecordDetailsRA_ARB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ARB(var integer,var integer);
external inner procedure OKCancel_ARB();
external inner procedure DefineElearningURLCacheLClass_ARB();
external inner procedure DefineElearningURLCacheDClass_ARB();
external inner function real TravelLogDeductions_ARB(real,real);
external inner procedure LoginButtons_ARB(Real);
external inner procedure FORMDEF2_ARB();
external inner procedure FORMDEF3_ARB();
external inner procedure ARS2RClass_ARB();
external inner procedure ALLVATRClass_ARB();

// Language functions AUS
external inner function Boolean DisplayLoginKeyPad_AUS();
external inner function string 255 VATZoneEditFieldLabelAUS(Integer);
external inner function real VATZoneButtonsLabelsAUS(real,real,real,real);
external inner procedure LoginButtons2_AUS(Real,Real);
external inner procedure FORMDEF_AUS();
external inner function string 255 DemoMsgWClassTitle_AUS(Boolean,Boolean);
external inner procedure TBEClassDef_AUS();
external inner function string 255 VATZoneNameAUS();
external inner procedure TSERW_AUS();
external inner procedure TSERWNT_AUS();
external inner procedure TSERWTouch_AUS();
external inner procedure TSERWTEST_AUS();
external inner procedure INVFORM_AUS(Boolean);
external inner procedure DisplayRecordDetails_AUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_AUS(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_AUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_AUS();
external inner function string 255 ResMonWClassWindowTitle_AUS();
external inner function string 255 RTMonWClassWindowTitle_AUS();
external inner procedure SetupNightAuditWindowControls_AUS(Boolean);
external inner procedure CURClassDefinitionAUS();
external inner function real DrawPaymentModesButtons_IV_AUS(real);
external inner function real FunctionButtons_AUS(string);
external inner procedure CreditCardWindowHeader_AUS(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_AUS(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_AUS(Real);
external inner procedure CreditCardWindowDeliveryDetail_AUS(Real);
external inner function real DrawPaymentModesButtons_AUS();
external inner procedure DrawBarMenuTiles_AUS(string);
external inner procedure DrawRestPMOtherPay_AUS();
external inner procedure DisplayRecordDetailsRA_AUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_AUS(var integer,var integer);
external inner procedure OKCancel_AUS();
external inner procedure DefineElearningURLCacheLClass_AUS();
external inner procedure DefineElearningURLCacheDClass_AUS();
external inner function real TravelLogDeductions_AUS(real,real);
external inner procedure LoginButtons_AUS(Real);
external inner procedure FORMDEF2_AUS();
external inner procedure FORMDEF3_AUS();
external inner procedure ARS2RClass_AUS();
external inner procedure ALLVATRClass_AUS();

// Language functions BRA
external inner function Boolean DisplayLoginKeyPad_BRA();
external inner function string 255 VATZoneEditFieldLabelBRA(Integer);
external inner function real VATZoneButtonsLabelsBRA(real,real,real,real);
external inner procedure LoginButtons2_BRA(Real,Real);
external inner procedure FORMDEF_BRA();
external inner function string 255 DemoMsgWClassTitle_BRA(Boolean,Boolean);
external inner procedure TBEClassDef_BRA();
external inner function string 255 VATZoneNameBRA();
external inner procedure TSERW_BRA();
external inner procedure TSERWNT_BRA();
external inner procedure TSERWTouch_BRA();
external inner procedure TSERWTEST_BRA();
external inner procedure INVFORM_BRA(Boolean);
external inner procedure DisplayRecordDetails_BRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_BRA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_BRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_BRA();
external inner function string 255 ResMonWClassWindowTitle_BRA();
external inner function string 255 RTMonWClassWindowTitle_BRA();
external inner procedure SetupNightAuditWindowControls_BRA(Boolean);
external inner procedure CURClassDefinitionBRA();
external inner function real DrawPaymentModesButtons_IV_BRA(real);
external inner function real FunctionButtons_BRA(string);
external inner procedure CreditCardWindowHeader_BRA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_BRA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_BRA(Real);
external inner procedure CreditCardWindowDeliveryDetail_BRA(Real);
external inner function real DrawPaymentModesButtons_BRA();
external inner procedure DrawBarMenuTiles_BRA(string);
external inner procedure DrawRestPMOtherPay_BRA();
external inner procedure DisplayRecordDetailsRA_BRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_BRA(var integer,var integer);
external inner procedure OKCancel_BRA();
external inner procedure DefineElearningURLCacheLClass_BRA();
external inner procedure DefineElearningURLCacheDClass_BRA();
external inner function real TravelLogDeductions_BRA(real,real);
external inner procedure LoginButtons_BRA(Real);
external inner procedure FORMDEF2_BRA();
external inner procedure FORMDEF3_BRA();
external inner procedure ARS2RClass_BRA();
external inner procedure ALLVATRClass_BRA();

// Language functions CAN
external inner function Boolean DisplayLoginKeyPad_CAN();
external inner function string 255 VATZoneEditFieldLabelCAN(Integer);
external inner function real VATZoneButtonsLabelsCAN(real,real,real,real);
external inner procedure LoginButtons2_CAN(Real,Real);
external inner procedure FORMDEF_CAN();
external inner function string 255 DemoMsgWClassTitle_CAN(Boolean,Boolean);
external inner procedure TBEClassDef_CAN();
external inner function string 255 VATZoneNameCAN();
external inner procedure TSERW_CAN();
external inner procedure TSERWNT_CAN();
external inner procedure TSERWTouch_CAN();
external inner procedure TSERWTEST_CAN();
external inner procedure INVFORM_CAN(Boolean);
external inner procedure DisplayRecordDetails_CAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CAN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CAN();
external inner function string 255 ResMonWClassWindowTitle_CAN();
external inner function string 255 RTMonWClassWindowTitle_CAN();
external inner procedure SetupNightAuditWindowControls_CAN(Boolean);
external inner procedure CURClassDefinitionCAN();
external inner function real DrawPaymentModesButtons_IV_CAN(real);
external inner function real FunctionButtons_CAN(string);
external inner procedure CreditCardWindowHeader_CAN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CAN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CAN(Real);
external inner procedure CreditCardWindowDeliveryDetail_CAN(Real);
external inner function real DrawPaymentModesButtons_CAN();
external inner procedure DrawBarMenuTiles_CAN(string);
external inner procedure DrawRestPMOtherPay_CAN();
external inner procedure DisplayRecordDetailsRA_CAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CAN(var integer,var integer);
external inner procedure OKCancel_CAN();
external inner procedure DefineElearningURLCacheLClass_CAN();
external inner procedure DefineElearningURLCacheDClass_CAN();
external inner function real TravelLogDeductions_CAN(real,real);
external inner procedure LoginButtons_CAN(Real);
external inner procedure FORMDEF2_CAN();
external inner procedure FORMDEF3_CAN();
external inner procedure ARS2RClass_CAN();
external inner procedure ALLVATRClass_CAN();

// Language functions CRO
external inner function Boolean DisplayLoginKeyPad_CRO();
external inner function string 255 VATZoneEditFieldLabelCRO(Integer);
external inner function real VATZoneButtonsLabelsCRO(real,real,real,real);
external inner procedure LoginButtons2_CRO(Real,Real);
external inner procedure FORMDEF_CRO();
external inner function string 255 DemoMsgWClassTitle_CRO(Boolean,Boolean);
external inner procedure TBEClassDef_CRO();
external inner function string 255 VATZoneNameCRO();
external inner procedure TSERW_CRO();
external inner procedure TSERWNT_CRO();
external inner procedure TSERWTouch_CRO();
external inner procedure TSERWTEST_CRO();
external inner procedure INVFORM_CRO(Boolean);
external inner procedure DisplayRecordDetails_CRO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CRO(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CRO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CRO();
external inner function string 255 ResMonWClassWindowTitle_CRO();
external inner function string 255 RTMonWClassWindowTitle_CRO();
external inner procedure SetupNightAuditWindowControls_CRO(Boolean);
external inner procedure CURClassDefinitionCRO();
external inner function real DrawPaymentModesButtons_IV_CRO(real);
external inner function real FunctionButtons_CRO(string);
external inner procedure CreditCardWindowHeader_CRO(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CRO(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CRO(Real);
external inner procedure CreditCardWindowDeliveryDetail_CRO(Real);
external inner function real DrawPaymentModesButtons_CRO();
external inner procedure DrawBarMenuTiles_CRO(string);
external inner procedure DrawRestPMOtherPay_CRO();
external inner procedure DisplayRecordDetailsRA_CRO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CRO(var integer,var integer);
external inner procedure OKCancel_CRO();
external inner procedure DefineElearningURLCacheLClass_CRO();
external inner procedure DefineElearningURLCacheDClass_CRO();
external inner function real TravelLogDeductions_CRO(real,real);
external inner procedure LoginButtons_CRO(Real);
external inner procedure FORMDEF2_CRO();
external inner procedure FORMDEF3_CRO();
external inner procedure ARS2RClass_CRO();
external inner procedure ALLVATRClass_CRO();

// Language functions CHI
external inner function Boolean DisplayLoginKeyPad_CHI();
external inner function string 255 VATZoneEditFieldLabelCHI(Integer);
external inner function real VATZoneButtonsLabelsCHI(real,real,real,real);
external inner procedure LoginButtons2_CHI(Real,Real);
external inner procedure FORMDEF_CHI();
external inner function string 255 DemoMsgWClassTitle_CHI(Boolean,Boolean);
external inner procedure TBEClassDef_CHI();
external inner function string 255 VATZoneNameCHI();
external inner procedure TSERW_CHI();
external inner procedure TSERWNT_CHI();
external inner procedure TSERWTouch_CHI();
external inner procedure TSERWTEST_CHI();
external inner procedure INVFORM_CHI(Boolean);
external inner procedure DisplayRecordDetails_CHI(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CHI(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CHI(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CHI();
external inner function string 255 ResMonWClassWindowTitle_CHI();
external inner function string 255 RTMonWClassWindowTitle_CHI();
external inner procedure SetupNightAuditWindowControls_CHI(Boolean);
external inner procedure CURClassDefinitionCHI();
external inner function real DrawPaymentModesButtons_IV_CHI(real);
external inner function real FunctionButtons_CHI(string);
external inner procedure CreditCardWindowHeader_CHI(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CHI(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CHI(Real);
external inner procedure CreditCardWindowDeliveryDetail_CHI(Real);
external inner function real DrawPaymentModesButtons_CHI();
external inner procedure DrawBarMenuTiles_CHI(string);
external inner procedure DrawRestPMOtherPay_CHI();
external inner procedure DisplayRecordDetailsRA_CHI(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CHI(var integer,var integer);
external inner procedure OKCancel_CHI();
external inner procedure DefineElearningURLCacheLClass_CHI();
external inner procedure DefineElearningURLCacheDClass_CHI();
external inner function real TravelLogDeductions_CHI(real,real);
external inner procedure LoginButtons_CHI(Real);
external inner procedure FORMDEF2_CHI();
external inner procedure FORMDEF3_CHI();
external inner procedure ARS2RClass_CHI();
external inner procedure ALLVATRClass_CHI();

// Language functions CZE
external inner function Boolean DisplayLoginKeyPad_CZE();
external inner function string 255 VATZoneEditFieldLabelCZE(Integer);
external inner function real VATZoneButtonsLabelsCZE(real,real,real,real);
external inner procedure LoginButtons2_CZE(Real,Real);
external inner procedure FORMDEF_CZE();
external inner function string 255 DemoMsgWClassTitle_CZE(Boolean,Boolean);
external inner procedure TBEClassDef_CZE();
external inner function string 255 VATZoneNameCZE();
external inner procedure TSERW_CZE();
external inner procedure TSERWNT_CZE();
external inner procedure TSERWTouch_CZE();
external inner procedure TSERWTEST_CZE();
external inner procedure INVFORM_CZE(Boolean);
external inner procedure DisplayRecordDetails_CZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_CZE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_CZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_CZE();
external inner function string 255 ResMonWClassWindowTitle_CZE();
external inner function string 255 RTMonWClassWindowTitle_CZE();
external inner procedure SetupNightAuditWindowControls_CZE(Boolean);
external inner procedure CURClassDefinitionCZE();
external inner function real DrawPaymentModesButtons_IV_CZE(real);
external inner function real FunctionButtons_CZE(string);
external inner procedure CreditCardWindowHeader_CZE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_CZE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_CZE(Real);
external inner procedure CreditCardWindowDeliveryDetail_CZE(Real);
external inner function real DrawPaymentModesButtons_CZE();
external inner procedure DrawBarMenuTiles_CZE(string);
external inner procedure DrawRestPMOtherPay_CZE();
external inner procedure DisplayRecordDetailsRA_CZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_CZE(var integer,var integer);
external inner procedure OKCancel_CZE();
external inner procedure DefineElearningURLCacheLClass_CZE();
external inner procedure DefineElearningURLCacheDClass_CZE();
external inner function real TravelLogDeductions_CZE(real,real);
external inner procedure LoginButtons_CZE(Real);
external inner procedure FORMDEF2_CZE();
external inner procedure FORMDEF3_CZE();
external inner procedure ARS2RClass_CZE();
external inner procedure ALLVATRClass_CZE();

// Language functions DAN
external inner function Boolean DisplayLoginKeyPad_DAN();
external inner function string 255 VATZoneEditFieldLabelDAN(Integer);
external inner function real VATZoneButtonsLabelsDAN(real,real,real,real);
external inner procedure LoginButtons2_DAN(Real,Real);
external inner procedure FORMDEF_DAN();
external inner function string 255 DemoMsgWClassTitle_DAN(Boolean,Boolean);
external inner procedure TBEClassDef_DAN();
external inner function string 255 VATZoneNameDAN();
external inner procedure TSERW_DAN();
external inner procedure TSERWNT_DAN();
external inner procedure TSERWTouch_DAN();
external inner procedure TSERWTEST_DAN();
external inner procedure INVFORM_DAN(Boolean);
external inner procedure DisplayRecordDetails_DAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_DAN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_DAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_DAN();
external inner function string 255 ResMonWClassWindowTitle_DAN();
external inner function string 255 RTMonWClassWindowTitle_DAN();
external inner procedure SetupNightAuditWindowControls_DAN(Boolean);
external inner procedure CURClassDefinitionDAN();
external inner function real DrawPaymentModesButtons_IV_DAN(real);
external inner function real FunctionButtons_DAN(string);
external inner procedure CreditCardWindowHeader_DAN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_DAN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_DAN(Real);
external inner procedure CreditCardWindowDeliveryDetail_DAN(Real);
external inner function real DrawPaymentModesButtons_DAN();
external inner procedure DrawBarMenuTiles_DAN(string);
external inner procedure DrawRestPMOtherPay_DAN();
external inner procedure DisplayRecordDetailsRA_DAN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_DAN(var integer,var integer);
external inner procedure OKCancel_DAN();
external inner procedure DefineElearningURLCacheLClass_DAN();
external inner procedure DefineElearningURLCacheDClass_DAN();
external inner function real TravelLogDeductions_DAN(real,real);
external inner procedure LoginButtons_DAN(Real);
external inner procedure FORMDEF2_DAN();
external inner procedure FORMDEF3_DAN();
external inner procedure ARS2RClass_DAN();
external inner procedure ALLVATRClass_DAN();

// Language functions ESP
external inner function Boolean DisplayLoginKeyPad_ESP();
external inner function string 255 VATZoneEditFieldLabelESP(Integer);
external inner function real VATZoneButtonsLabelsESP(real,real,real,real);
external inner procedure LoginButtons2_ESP(Real,Real);
external inner procedure FORMDEF_ESP();
external inner function string 255 DemoMsgWClassTitle_ESP(Boolean,Boolean);
external inner procedure TBEClassDef_ESP();
external inner function string 255 VATZoneNameESP();
external inner procedure TSERW_ESP();
external inner procedure TSERWNT_ESP();
external inner procedure TSERWTouch_ESP();
external inner procedure TSERWTEST_ESP();
external inner procedure INVFORM_ESP(Boolean);
external inner procedure DisplayRecordDetails_ESP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ESP(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ESP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ESP();
external inner function string 255 ResMonWClassWindowTitle_ESP();
external inner function string 255 RTMonWClassWindowTitle_ESP();
external inner procedure SetupNightAuditWindowControls_ESP(Boolean);
external inner procedure CURClassDefinitionESP();
external inner function real DrawPaymentModesButtons_IV_ESP(real);
external inner function real FunctionButtons_ESP(string);
external inner procedure CreditCardWindowHeader_ESP(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ESP(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ESP(Real);
external inner procedure CreditCardWindowDeliveryDetail_ESP(Real);
external inner function real DrawPaymentModesButtons_ESP();
external inner procedure DrawBarMenuTiles_ESP(string);
external inner procedure DrawRestPMOtherPay_ESP();
external inner procedure DisplayRecordDetailsRA_ESP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ESP(var integer,var integer);
external inner procedure OKCancel_ESP();
external inner procedure DefineElearningURLCacheLClass_ESP();
external inner procedure DefineElearningURLCacheDClass_ESP();
external inner function real TravelLogDeductions_ESP(real,real);
external inner procedure LoginButtons_ESP(Real);
external inner procedure FORMDEF2_ESP();
external inner procedure FORMDEF3_ESP();
external inner procedure ARS2RClass_ESP();
external inner procedure ALLVATRClass_ESP();

// Language functions EST
external inner function Boolean DisplayLoginKeyPad_EST();
external inner function string 255 VATZoneEditFieldLabelEST(Integer);
external inner function real VATZoneButtonsLabelsEST(real,real,real,real);
external inner procedure LoginButtons2_EST(Real,Real);
external inner procedure FORMDEF_EST();
external inner function string 255 DemoMsgWClassTitle_EST(Boolean,Boolean);
external inner procedure TBEClassDef_EST();
external inner function string 255 VATZoneNameEST();
external inner procedure TSERW_EST();
external inner procedure TSERWNT_EST();
external inner procedure TSERWTouch_EST();
external inner procedure TSERWTEST_EST();
external inner procedure INVFORM_EST(Boolean);
external inner procedure DisplayRecordDetails_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_EST(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_EST();
external inner function string 255 ResMonWClassWindowTitle_EST();
external inner function string 255 RTMonWClassWindowTitle_EST();
external inner procedure SetupNightAuditWindowControls_EST(Boolean);
external inner procedure CURClassDefinitionEST();
external inner function real DrawPaymentModesButtons_IV_EST(real);
external inner function real FunctionButtons_EST(string);
external inner procedure CreditCardWindowHeader_EST(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_EST(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_EST(Real);
external inner procedure CreditCardWindowDeliveryDetail_EST(Real);
external inner function real DrawPaymentModesButtons_EST();
external inner procedure DrawBarMenuTiles_EST(string);
external inner procedure DrawRestPMOtherPay_EST();
external inner procedure DisplayRecordDetailsRA_EST(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_EST(var integer,var integer);
external inner procedure OKCancel_EST();
external inner procedure DefineElearningURLCacheLClass_EST();
external inner procedure DefineElearningURLCacheDClass_EST();
external inner function real TravelLogDeductions_EST(real,real);
external inner procedure LoginButtons_EST(Real);
external inner procedure FORMDEF2_EST();
external inner procedure FORMDEF3_EST();
external inner procedure ARS2RClass_EST();
external inner procedure ALLVATRClass_EST();

// Language functions FIN
external inner function Boolean DisplayLoginKeyPad_FIN();
external inner function string 255 VATZoneEditFieldLabelFIN(Integer);
external inner function real VATZoneButtonsLabelsFIN(real,real,real,real);
external inner procedure LoginButtons2_FIN(Real,Real);
external inner procedure FORMDEF_FIN();
external inner function string 255 DemoMsgWClassTitle_FIN(Boolean,Boolean);
external inner procedure TBEClassDef_FIN();
external inner function string 255 VATZoneNameFIN();
external inner procedure TSERW_FIN();
external inner procedure TSERWNT_FIN();
external inner procedure TSERWTouch_FIN();
external inner procedure TSERWTEST_FIN();
external inner procedure INVFORM_FIN(Boolean);
external inner procedure DisplayRecordDetails_FIN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FIN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FIN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FIN();
external inner function string 255 ResMonWClassWindowTitle_FIN();
external inner function string 255 RTMonWClassWindowTitle_FIN();
external inner procedure SetupNightAuditWindowControls_FIN(Boolean);
external inner procedure CURClassDefinitionFIN();
external inner function real DrawPaymentModesButtons_IV_FIN(real);
external inner function real FunctionButtons_FIN(string);
external inner procedure CreditCardWindowHeader_FIN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FIN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FIN(Real);
external inner procedure CreditCardWindowDeliveryDetail_FIN(Real);
external inner function real DrawPaymentModesButtons_FIN();
external inner procedure DrawBarMenuTiles_FIN(string);
external inner procedure DrawRestPMOtherPay_FIN();
external inner procedure DisplayRecordDetailsRA_FIN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FIN(var integer,var integer);
external inner procedure OKCancel_FIN();
external inner procedure DefineElearningURLCacheLClass_FIN();
external inner procedure DefineElearningURLCacheDClass_FIN();
external inner function real TravelLogDeductions_FIN(real,real);
external inner procedure LoginButtons_FIN(Real);
external inner procedure FORMDEF2_FIN();
external inner procedure FORMDEF3_FIN();
external inner procedure ARS2RClass_FIN();
external inner procedure ALLVATRClass_FIN();

// Language functions FRA
external inner function Boolean DisplayLoginKeyPad_FRA();
external inner function string 255 VATZoneEditFieldLabelFRA(Integer);
external inner function real VATZoneButtonsLabelsFRA(real,real,real,real);
external inner procedure LoginButtons2_FRA(Real,Real);
external inner procedure FORMDEF_FRA();
external inner function string 255 DemoMsgWClassTitle_FRA(Boolean,Boolean);
external inner procedure TBEClassDef_FRA();
external inner function string 255 VATZoneNameFRA();
external inner procedure TSERW_FRA();
external inner procedure TSERWNT_FRA();
external inner procedure TSERWTouch_FRA();
external inner procedure TSERWTEST_FRA();
external inner procedure INVFORM_FRA(Boolean);
external inner procedure DisplayRecordDetails_FRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FRA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FRA();
external inner function string 255 ResMonWClassWindowTitle_FRA();
external inner function string 255 RTMonWClassWindowTitle_FRA();
external inner procedure SetupNightAuditWindowControls_FRA(Boolean);
external inner procedure CURClassDefinitionFRA();
external inner function real DrawPaymentModesButtons_IV_FRA(real);
external inner function real FunctionButtons_FRA(string);
external inner procedure CreditCardWindowHeader_FRA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FRA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FRA(Real);
external inner procedure CreditCardWindowDeliveryDetail_FRA(Real);
external inner function real DrawPaymentModesButtons_FRA();
external inner procedure DrawBarMenuTiles_FRA(string);
external inner procedure DrawRestPMOtherPay_FRA();
external inner procedure DisplayRecordDetailsRA_FRA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FRA(var integer,var integer);
external inner procedure OKCancel_FRA();
external inner procedure DefineElearningURLCacheLClass_FRA();
external inner procedure DefineElearningURLCacheDClass_FRA();
external inner function real TravelLogDeductions_FRA(real,real);
external inner procedure LoginButtons_FRA(Real);
external inner procedure FORMDEF2_FRA();
external inner procedure FORMDEF3_FRA();
external inner procedure ARS2RClass_FRA();
external inner procedure ALLVATRClass_FRA();

// Language functions FRC
external inner function Boolean DisplayLoginKeyPad_FRC();
external inner function string 255 VATZoneEditFieldLabelFRC(Integer);
external inner function real VATZoneButtonsLabelsFRC(real,real,real,real);
external inner procedure LoginButtons2_FRC(Real,Real);
external inner procedure FORMDEF_FRC();
external inner function string 255 DemoMsgWClassTitle_FRC(Boolean,Boolean);
external inner procedure TBEClassDef_FRC();
external inner function string 255 VATZoneNameFRC();
external inner procedure TSERW_FRC();
external inner procedure TSERWNT_FRC();
external inner procedure TSERWTouch_FRC();
external inner procedure TSERWTEST_FRC();
external inner procedure INVFORM_FRC(Boolean);
external inner procedure DisplayRecordDetails_FRC(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FRC(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FRC(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FRC();
external inner function string 255 ResMonWClassWindowTitle_FRC();
external inner function string 255 RTMonWClassWindowTitle_FRC();
external inner procedure SetupNightAuditWindowControls_FRC(Boolean);
external inner procedure CURClassDefinitionFRC();
external inner function real DrawPaymentModesButtons_IV_FRC(real);
external inner function real FunctionButtons_FRC(string);
external inner procedure CreditCardWindowHeader_FRC(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FRC(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FRC(Real);
external inner procedure CreditCardWindowDeliveryDetail_FRC(Real);
external inner function real DrawPaymentModesButtons_FRC();
external inner procedure DrawBarMenuTiles_FRC(string);
external inner procedure DrawRestPMOtherPay_FRC();
external inner procedure DisplayRecordDetailsRA_FRC(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FRC(var integer,var integer);
external inner procedure OKCancel_FRC();
external inner procedure DefineElearningURLCacheLClass_FRC();
external inner procedure DefineElearningURLCacheDClass_FRC();
external inner function real TravelLogDeductions_FRC(real,real);
external inner procedure LoginButtons_FRC(Real);
external inner procedure FORMDEF2_FRC();
external inner procedure FORMDEF3_FRC();
external inner procedure ARS2RClass_FRC();
external inner procedure ALLVATRClass_FRC();

// Language functions FAR
external inner function Boolean DisplayLoginKeyPad_FAR();
external inner function string 255 VATZoneEditFieldLabelFAR(Integer);
external inner function real VATZoneButtonsLabelsFAR(real,real,real,real);
external inner procedure LoginButtons2_FAR(Real,Real);
external inner procedure FORMDEF_FAR();
external inner function string 255 DemoMsgWClassTitle_FAR(Boolean,Boolean);
external inner procedure TBEClassDef_FAR();
external inner function string 255 VATZoneNameFAR();
external inner procedure TSERW_FAR();
external inner procedure TSERWNT_FAR();
external inner procedure TSERWTouch_FAR();
external inner procedure TSERWTEST_FAR();
external inner procedure INVFORM_FAR(Boolean);
external inner procedure DisplayRecordDetails_FAR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_FAR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_FAR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_FAR();
external inner function string 255 ResMonWClassWindowTitle_FAR();
external inner function string 255 RTMonWClassWindowTitle_FAR();
external inner procedure SetupNightAuditWindowControls_FAR(Boolean);
external inner procedure CURClassDefinitionFAR();
external inner function real DrawPaymentModesButtons_IV_FAR(real);
external inner function real FunctionButtons_FAR(string);
external inner procedure CreditCardWindowHeader_FAR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_FAR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_FAR(Real);
external inner procedure CreditCardWindowDeliveryDetail_FAR(Real);
external inner function real DrawPaymentModesButtons_FAR();
external inner procedure DrawBarMenuTiles_FAR(string);
external inner procedure DrawRestPMOtherPay_FAR();
external inner procedure DisplayRecordDetailsRA_FAR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_FAR(var integer,var integer);
external inner procedure OKCancel_FAR();
external inner procedure DefineElearningURLCacheLClass_FAR();
external inner procedure DefineElearningURLCacheDClass_FAR();
external inner function real TravelLogDeductions_FAR(real,real);
external inner procedure LoginButtons_FAR(Real);
external inner procedure FORMDEF2_FAR();
external inner procedure FORMDEF3_FAR();
external inner procedure ARS2RClass_FAR();
external inner procedure ALLVATRClass_FAR();

// Language functions GER
external inner function Boolean DisplayLoginKeyPad_GER();
external inner function string 255 VATZoneEditFieldLabelGER(Integer);
external inner function real VATZoneButtonsLabelsGER(real,real,real,real);
external inner procedure LoginButtons2_GER(Real,Real);
external inner procedure FORMDEF_GER();
external inner function string 255 DemoMsgWClassTitle_GER(Boolean,Boolean);
external inner procedure TBEClassDef_GER();
external inner function string 255 VATZoneNameGER();
external inner procedure TSERW_GER();
external inner procedure TSERWNT_GER();
external inner procedure TSERWTouch_GER();
external inner procedure TSERWTEST_GER();
external inner procedure INVFORM_GER(Boolean);
external inner procedure DisplayRecordDetails_GER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_GER(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_GER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_GER();
external inner function string 255 ResMonWClassWindowTitle_GER();
external inner function string 255 RTMonWClassWindowTitle_GER();
external inner procedure SetupNightAuditWindowControls_GER(Boolean);
external inner procedure CURClassDefinitionGER();
external inner function real DrawPaymentModesButtons_IV_GER(real);
external inner function real FunctionButtons_GER(string);
external inner procedure CreditCardWindowHeader_GER(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_GER(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_GER(Real);
external inner procedure CreditCardWindowDeliveryDetail_GER(Real);
external inner function real DrawPaymentModesButtons_GER();
external inner procedure DrawBarMenuTiles_GER(string);
external inner procedure DrawRestPMOtherPay_GER();
external inner procedure DisplayRecordDetailsRA_GER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_GER(var integer,var integer);
external inner procedure OKCancel_GER();
external inner procedure DefineElearningURLCacheLClass_GER();
external inner procedure DefineElearningURLCacheDClass_GER();
external inner function real TravelLogDeductions_GER(real,real);
external inner procedure LoginButtons_GER(Real);
external inner procedure FORMDEF2_GER();
external inner procedure FORMDEF3_GER();
external inner procedure ARS2RClass_GER();
external inner procedure ALLVATRClass_GER();

// Language functions HEB
external inner function Boolean DisplayLoginKeyPad_HEB();
external inner function string 255 VATZoneEditFieldLabelHEB(Integer);
external inner function real VATZoneButtonsLabelsHEB(real,real,real,real);
external inner procedure LoginButtons2_HEB(Real,Real);
external inner procedure FORMDEF_HEB();
external inner function string 255 DemoMsgWClassTitle_HEB(Boolean,Boolean);
external inner procedure TBEClassDef_HEB();
external inner function string 255 VATZoneNameHEB();
external inner procedure TSERW_HEB();
external inner procedure TSERWNT_HEB();
external inner procedure TSERWTouch_HEB();
external inner procedure TSERWTEST_HEB();
external inner procedure INVFORM_HEB(Boolean);
external inner procedure DisplayRecordDetails_HEB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_HEB(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_HEB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_HEB();
external inner function string 255 ResMonWClassWindowTitle_HEB();
external inner function string 255 RTMonWClassWindowTitle_HEB();
external inner procedure SetupNightAuditWindowControls_HEB(Boolean);
external inner procedure CURClassDefinitionHEB();
external inner function real DrawPaymentModesButtons_IV_HEB(real);
external inner function real FunctionButtons_HEB(string);
external inner procedure CreditCardWindowHeader_HEB(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_HEB(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_HEB(Real);
external inner procedure CreditCardWindowDeliveryDetail_HEB(Real);
external inner function real DrawPaymentModesButtons_HEB();
external inner procedure DrawBarMenuTiles_HEB(string);
external inner procedure DrawRestPMOtherPay_HEB();
external inner procedure DisplayRecordDetailsRA_HEB(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_HEB(var integer,var integer);
external inner procedure OKCancel_HEB();
external inner procedure DefineElearningURLCacheLClass_HEB();
external inner procedure DefineElearningURLCacheDClass_HEB();
external inner function real TravelLogDeductions_HEB(real,real);
external inner procedure LoginButtons_HEB(Real);
external inner procedure FORMDEF2_HEB();
external inner procedure FORMDEF3_HEB();
external inner procedure ARS2RClass_HEB();
external inner procedure ALLVATRClass_HEB();

// Language functions HUN
external inner function Boolean DisplayLoginKeyPad_HUN();
external inner function string 255 VATZoneEditFieldLabelHUN(Integer);
external inner function real VATZoneButtonsLabelsHUN(real,real,real,real);
external inner procedure LoginButtons2_HUN(Real,Real);
external inner procedure FORMDEF_HUN();
external inner function string 255 DemoMsgWClassTitle_HUN(Boolean,Boolean);
external inner procedure TBEClassDef_HUN();
external inner function string 255 VATZoneNameHUN();
external inner procedure TSERW_HUN();
external inner procedure TSERWNT_HUN();
external inner procedure TSERWTouch_HUN();
external inner procedure TSERWTEST_HUN();
external inner procedure INVFORM_HUN(Boolean);
external inner procedure DisplayRecordDetails_HUN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_HUN(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_HUN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_HUN();
external inner function string 255 ResMonWClassWindowTitle_HUN();
external inner function string 255 RTMonWClassWindowTitle_HUN();
external inner procedure SetupNightAuditWindowControls_HUN(Boolean);
external inner procedure CURClassDefinitionHUN();
external inner function real DrawPaymentModesButtons_IV_HUN(real);
external inner function real FunctionButtons_HUN(string);
external inner procedure CreditCardWindowHeader_HUN(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_HUN(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_HUN(Real);
external inner procedure CreditCardWindowDeliveryDetail_HUN(Real);
external inner function real DrawPaymentModesButtons_HUN();
external inner procedure DrawBarMenuTiles_HUN(string);
external inner procedure DrawRestPMOtherPay_HUN();
external inner procedure DisplayRecordDetailsRA_HUN(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_HUN(var integer,var integer);
external inner procedure OKCancel_HUN();
external inner procedure DefineElearningURLCacheLClass_HUN();
external inner procedure DefineElearningURLCacheDClass_HUN();
external inner function real TravelLogDeductions_HUN(real,real);
external inner procedure LoginButtons_HUN(Real);
external inner procedure FORMDEF2_HUN();
external inner procedure FORMDEF3_HUN();
external inner procedure ARS2RClass_HUN();
external inner procedure ALLVATRClass_HUN();

// Language functions ICE
external inner function Boolean DisplayLoginKeyPad_ICE();
external inner function string 255 VATZoneEditFieldLabelICE(Integer);
external inner function real VATZoneButtonsLabelsICE(real,real,real,real);
external inner procedure LoginButtons2_ICE(Real,Real);
external inner procedure FORMDEF_ICE();
external inner function string 255 DemoMsgWClassTitle_ICE(Boolean,Boolean);
external inner procedure TBEClassDef_ICE();
external inner function string 255 VATZoneNameICE();
external inner procedure TSERW_ICE();
external inner procedure TSERWNT_ICE();
external inner procedure TSERWTouch_ICE();
external inner procedure TSERWTEST_ICE();
external inner procedure INVFORM_ICE(Boolean);
external inner procedure DisplayRecordDetails_ICE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ICE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ICE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ICE();
external inner function string 255 ResMonWClassWindowTitle_ICE();
external inner function string 255 RTMonWClassWindowTitle_ICE();
external inner procedure SetupNightAuditWindowControls_ICE(Boolean);
external inner procedure CURClassDefinitionICE();
external inner function real DrawPaymentModesButtons_IV_ICE(real);
external inner function real FunctionButtons_ICE(string);
external inner procedure CreditCardWindowHeader_ICE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ICE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ICE(Real);
external inner procedure CreditCardWindowDeliveryDetail_ICE(Real);
external inner function real DrawPaymentModesButtons_ICE();
external inner procedure DrawBarMenuTiles_ICE(string);
external inner procedure DrawRestPMOtherPay_ICE();
external inner procedure DisplayRecordDetailsRA_ICE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ICE(var integer,var integer);
external inner procedure OKCancel_ICE();
external inner procedure DefineElearningURLCacheLClass_ICE();
external inner procedure DefineElearningURLCacheDClass_ICE();
external inner function real TravelLogDeductions_ICE(real,real);
external inner procedure LoginButtons_ICE(Real);
external inner procedure FORMDEF2_ICE();
external inner procedure FORMDEF3_ICE();
external inner procedure ARS2RClass_ICE();
external inner procedure ALLVATRClass_ICE();

// Language functions ITA
external inner function Boolean DisplayLoginKeyPad_ITA();
external inner function string 255 VATZoneEditFieldLabelITA(Integer);
external inner function real VATZoneButtonsLabelsITA(real,real,real,real);
external inner procedure LoginButtons2_ITA(Real,Real);
external inner procedure FORMDEF_ITA();
external inner function string 255 DemoMsgWClassTitle_ITA(Boolean,Boolean);
external inner procedure TBEClassDef_ITA();
external inner function string 255 VATZoneNameITA();
external inner procedure TSERW_ITA();
external inner procedure TSERWNT_ITA();
external inner procedure TSERWTouch_ITA();
external inner procedure TSERWTEST_ITA();
external inner procedure INVFORM_ITA(Boolean);
external inner procedure DisplayRecordDetails_ITA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ITA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ITA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ITA();
external inner function string 255 ResMonWClassWindowTitle_ITA();
external inner function string 255 RTMonWClassWindowTitle_ITA();
external inner procedure SetupNightAuditWindowControls_ITA(Boolean);
external inner procedure CURClassDefinitionITA();
external inner function real DrawPaymentModesButtons_IV_ITA(real);
external inner function real FunctionButtons_ITA(string);
external inner procedure CreditCardWindowHeader_ITA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ITA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ITA(Real);
external inner procedure CreditCardWindowDeliveryDetail_ITA(Real);
external inner function real DrawPaymentModesButtons_ITA();
external inner procedure DrawBarMenuTiles_ITA(string);
external inner procedure DrawRestPMOtherPay_ITA();
external inner procedure DisplayRecordDetailsRA_ITA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ITA(var integer,var integer);
external inner procedure OKCancel_ITA();
external inner procedure DefineElearningURLCacheLClass_ITA();
external inner procedure DefineElearningURLCacheDClass_ITA();
external inner function real TravelLogDeductions_ITA(real,real);
external inner procedure LoginButtons_ITA(Real);
external inner procedure FORMDEF2_ITA();
external inner procedure FORMDEF3_ITA();
external inner procedure ARS2RClass_ITA();
external inner procedure ALLVATRClass_ITA();

// Language functions KEE
external inner function Boolean DisplayLoginKeyPad_KEE();
external inner function string 255 VATZoneEditFieldLabelKEE(Integer);
external inner function real VATZoneButtonsLabelsKEE(real,real,real,real);
external inner procedure LoginButtons2_KEE(Real,Real);
external inner procedure FORMDEF_KEE();
external inner function string 255 DemoMsgWClassTitle_KEE(Boolean,Boolean);
external inner procedure TBEClassDef_KEE();
external inner function string 255 VATZoneNameKEE();
external inner procedure TSERW_KEE();
external inner procedure TSERWNT_KEE();
external inner procedure TSERWTouch_KEE();
external inner procedure TSERWTEST_KEE();
external inner procedure INVFORM_KEE(Boolean);
external inner procedure DisplayRecordDetails_KEE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_KEE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_KEE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_KEE();
external inner function string 255 ResMonWClassWindowTitle_KEE();
external inner function string 255 RTMonWClassWindowTitle_KEE();
external inner procedure SetupNightAuditWindowControls_KEE(Boolean);
external inner procedure CURClassDefinitionKEE();
external inner function real DrawPaymentModesButtons_IV_KEE(real);
external inner function real FunctionButtons_KEE(string);
external inner procedure CreditCardWindowHeader_KEE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_KEE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_KEE(Real);
external inner procedure CreditCardWindowDeliveryDetail_KEE(Real);
external inner function real DrawPaymentModesButtons_KEE();
external inner procedure DrawBarMenuTiles_KEE(string);
external inner procedure DrawRestPMOtherPay_KEE();
external inner procedure DisplayRecordDetailsRA_KEE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_KEE(var integer,var integer);
external inner procedure OKCancel_KEE();
external inner procedure DefineElearningURLCacheLClass_KEE();
external inner procedure DefineElearningURLCacheDClass_KEE();
external inner function real TravelLogDeductions_KEE(real,real);
external inner procedure LoginButtons_KEE(Real);
external inner procedure FORMDEF2_KEE();
external inner procedure FORMDEF3_KEE();
external inner procedure ARS2RClass_KEE();
external inner procedure ALLVATRClass_KEE();

// Language functions LAT
external inner function Boolean DisplayLoginKeyPad_LAT();
external inner function string 255 VATZoneEditFieldLabelLAT(Integer);
external inner function real VATZoneButtonsLabelsLAT(real,real,real,real);
external inner procedure LoginButtons2_LAT(Real,Real);
external inner procedure FORMDEF_LAT();
external inner function string 255 DemoMsgWClassTitle_LAT(Boolean,Boolean);
external inner procedure TBEClassDef_LAT();
external inner function string 255 VATZoneNameLAT();
external inner procedure TSERW_LAT();
external inner procedure TSERWNT_LAT();
external inner procedure TSERWTouch_LAT();
external inner procedure TSERWTEST_LAT();
external inner procedure INVFORM_LAT(Boolean);
external inner procedure DisplayRecordDetails_LAT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_LAT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LAT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LAT();
external inner function string 255 ResMonWClassWindowTitle_LAT();
external inner function string 255 RTMonWClassWindowTitle_LAT();
external inner procedure SetupNightAuditWindowControls_LAT(Boolean);
external inner procedure CURClassDefinitionLAT();
external inner function real DrawPaymentModesButtons_IV_LAT(real);
external inner function real FunctionButtons_LAT(string);
external inner procedure CreditCardWindowHeader_LAT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LAT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LAT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LAT(Real);
external inner function real DrawPaymentModesButtons_LAT();
external inner procedure DrawBarMenuTiles_LAT(string);
external inner procedure DrawRestPMOtherPay_LAT();
external inner procedure DisplayRecordDetailsRA_LAT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LAT(var integer,var integer);
external inner procedure OKCancel_LAT();
external inner procedure DefineElearningURLCacheLClass_LAT();
external inner procedure DefineElearningURLCacheDClass_LAT();
external inner function real TravelLogDeductions_LAT(real,real);
external inner procedure LoginButtons_LAT(Real);
external inner procedure FORMDEF2_LAT();
external inner procedure FORMDEF3_LAT();
external inner procedure ARS2RClass_LAT();
external inner procedure ALLVATRClass_LAT();

// Language functions LIT
external inner function Boolean DisplayLoginKeyPad_LIT();
external inner function string 255 VATZoneEditFieldLabelLIT(Integer);
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);
external inner procedure LoginButtons2_LIT(Real,Real);
external inner procedure FORMDEF_LIT();
external inner function string 255 DemoMsgWClassTitle_LIT(Boolean,Boolean);
external inner procedure TBEClassDef_LIT();
external inner function string 255 VATZoneNameLIT();
external inner procedure TSERW_LIT();
external inner procedure TSERWNT_LIT();
external inner procedure TSERWTouch_LIT();
external inner procedure TSERWTEST_LIT();
external inner procedure INVFORM_LIT(Boolean);
external inner procedure DisplayRecordDetails_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_LIT(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_LIT();
external inner function string 255 ResMonWClassWindowTitle_LIT();
external inner function string 255 RTMonWClassWindowTitle_LIT();
external inner procedure SetupNightAuditWindowControls_LIT(Boolean);
external inner procedure CURClassDefinitionLIT();
external inner function real DrawPaymentModesButtons_IV_LIT(real);
external inner function real FunctionButtons_LIT(string);
external inner procedure CreditCardWindowHeader_LIT(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_LIT(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_LIT(Real);
external inner procedure CreditCardWindowDeliveryDetail_LIT(Real);
external inner function real DrawPaymentModesButtons_LIT();
external inner procedure DrawBarMenuTiles_LIT(string);
external inner procedure DrawRestPMOtherPay_LIT();
external inner procedure DisplayRecordDetailsRA_LIT(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_LIT(var integer,var integer);
external inner procedure OKCancel_LIT();
external inner procedure DefineElearningURLCacheLClass_LIT();
external inner procedure DefineElearningURLCacheDClass_LIT();
external inner function real TravelLogDeductions_LIT(real,real);
external inner procedure LoginButtons_LIT(Real);
external inner procedure FORMDEF2_LIT();
external inner procedure FORMDEF3_LIT();
external inner procedure ARS2RClass_LIT();
external inner procedure ALLVATRClass_LIT();

// Language functions NOR
external inner function Boolean DisplayLoginKeyPad_NOR();
external inner function string 255 VATZoneEditFieldLabelNOR(Integer);
external inner function real VATZoneButtonsLabelsNOR(real,real,real,real);
external inner procedure LoginButtons2_NOR(Real,Real);
external inner procedure FORMDEF_NOR();
external inner function string 255 DemoMsgWClassTitle_NOR(Boolean,Boolean);
external inner procedure TBEClassDef_NOR();
external inner function string 255 VATZoneNameNOR();
external inner procedure TSERW_NOR();
external inner procedure TSERWNT_NOR();
external inner procedure TSERWTouch_NOR();
external inner procedure TSERWTEST_NOR();
external inner procedure INVFORM_NOR(Boolean);
external inner procedure DisplayRecordDetails_NOR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_NOR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_NOR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_NOR();
external inner function string 255 ResMonWClassWindowTitle_NOR();
external inner function string 255 RTMonWClassWindowTitle_NOR();
external inner procedure SetupNightAuditWindowControls_NOR(Boolean);
external inner procedure CURClassDefinitionNOR();
external inner function real DrawPaymentModesButtons_IV_NOR(real);
external inner function real FunctionButtons_NOR(string);
external inner procedure CreditCardWindowHeader_NOR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_NOR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_NOR(Real);
external inner procedure CreditCardWindowDeliveryDetail_NOR(Real);
external inner function real DrawPaymentModesButtons_NOR();
external inner procedure DrawBarMenuTiles_NOR(string);
external inner procedure DrawRestPMOtherPay_NOR();
external inner procedure DisplayRecordDetailsRA_NOR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_NOR(var integer,var integer);
external inner procedure OKCancel_NOR();
external inner procedure DefineElearningURLCacheLClass_NOR();
external inner procedure DefineElearningURLCacheDClass_NOR();
external inner function real TravelLogDeductions_NOR(real,real);
external inner procedure LoginButtons_NOR(Real);
external inner procedure FORMDEF2_NOR();
external inner procedure FORMDEF3_NOR();
external inner procedure ARS2RClass_NOR();
external inner procedure ALLVATRClass_NOR();

// Language functions NZE
external inner function Boolean DisplayLoginKeyPad_NZE();
external inner function string 255 VATZoneEditFieldLabelNZE(Integer);
external inner function real VATZoneButtonsLabelsNZE(real,real,real,real);
external inner procedure LoginButtons2_NZE(Real,Real);
external inner procedure FORMDEF_NZE();
external inner function string 255 DemoMsgWClassTitle_NZE(Boolean,Boolean);
external inner procedure TBEClassDef_NZE();
external inner function string 255 VATZoneNameNZE();
external inner procedure TSERW_NZE();
external inner procedure TSERWNT_NZE();
external inner procedure TSERWTouch_NZE();
external inner procedure TSERWTEST_NZE();
external inner procedure INVFORM_NZE(Boolean);
external inner procedure DisplayRecordDetails_NZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_NZE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_NZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_NZE();
external inner function string 255 ResMonWClassWindowTitle_NZE();
external inner function string 255 RTMonWClassWindowTitle_NZE();
external inner procedure SetupNightAuditWindowControls_NZE(Boolean);
external inner procedure CURClassDefinitionNZE();
external inner function real DrawPaymentModesButtons_IV_NZE(real);
external inner function real FunctionButtons_NZE(string);
external inner procedure CreditCardWindowHeader_NZE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_NZE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_NZE(Real);
external inner procedure CreditCardWindowDeliveryDetail_NZE(Real);
external inner function real DrawPaymentModesButtons_NZE();
external inner procedure DrawBarMenuTiles_NZE(string);
external inner procedure DrawRestPMOtherPay_NZE();
external inner procedure DisplayRecordDetailsRA_NZE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_NZE(var integer,var integer);
external inner procedure OKCancel_NZE();
external inner procedure DefineElearningURLCacheLClass_NZE();
external inner procedure DefineElearningURLCacheDClass_NZE();
external inner function real TravelLogDeductions_NZE(real,real);
external inner procedure LoginButtons_NZE(Real);
external inner procedure FORMDEF2_NZE();
external inner procedure FORMDEF3_NZE();
external inner procedure ARS2RClass_NZE();
external inner procedure ALLVATRClass_NZE();

// Language functions PHE
external inner function Boolean DisplayLoginKeyPad_PHE();
external inner function string 255 VATZoneEditFieldLabelPHE(Integer);
external inner function real VATZoneButtonsLabelsPHE(real,real,real,real);
external inner procedure LoginButtons2_PHE(Real,Real);
external inner procedure FORMDEF_PHE();
external inner function string 255 DemoMsgWClassTitle_PHE(Boolean,Boolean);
external inner procedure TBEClassDef_PHE();
external inner function string 255 VATZoneNamePHE();
external inner procedure TSERW_PHE();
external inner procedure TSERWNT_PHE();
external inner procedure TSERWTouch_PHE();
external inner procedure TSERWTEST_PHE();
external inner procedure INVFORM_PHE(Boolean);
external inner procedure DisplayRecordDetails_PHE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_PHE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_PHE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_PHE();
external inner function string 255 ResMonWClassWindowTitle_PHE();
external inner function string 255 RTMonWClassWindowTitle_PHE();
external inner procedure SetupNightAuditWindowControls_PHE(Boolean);
external inner procedure CURClassDefinitionPHE();
external inner function real DrawPaymentModesButtons_IV_PHE(real);
external inner function real FunctionButtons_PHE(string);
external inner procedure CreditCardWindowHeader_PHE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_PHE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_PHE(Real);
external inner procedure CreditCardWindowDeliveryDetail_PHE(Real);
external inner function real DrawPaymentModesButtons_PHE();
external inner procedure DrawBarMenuTiles_PHE(string);
external inner procedure DrawRestPMOtherPay_PHE();
external inner procedure DisplayRecordDetailsRA_PHE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_PHE(var integer,var integer);
external inner procedure OKCancel_PHE();
external inner procedure DefineElearningURLCacheLClass_PHE();
external inner procedure DefineElearningURLCacheDClass_PHE();
external inner function real TravelLogDeductions_PHE(real,real);
external inner procedure LoginButtons_PHE(Real);
external inner procedure FORMDEF2_PHE();
external inner procedure FORMDEF3_PHE();
external inner procedure ARS2RClass_PHE();
external inner procedure ALLVATRClass_PHE();

// Language functions POL
external inner function Boolean DisplayLoginKeyPad_POL();
external inner function string 255 VATZoneEditFieldLabelPOL(Integer);
external inner function real VATZoneButtonsLabelsPOL(real,real,real,real);
external inner procedure LoginButtons2_POL(Real,Real);
external inner procedure FORMDEF_POL();
external inner function string 255 DemoMsgWClassTitle_POL(Boolean,Boolean);
external inner procedure TBEClassDef_POL();
external inner function string 255 VATZoneNamePOL();
external inner procedure TSERW_POL();
external inner procedure TSERWNT_POL();
external inner procedure TSERWTouch_POL();
external inner procedure TSERWTEST_POL();
external inner procedure INVFORM_POL(Boolean);
external inner procedure DisplayRecordDetails_POL(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_POL(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_POL(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_POL();
external inner function string 255 ResMonWClassWindowTitle_POL();
external inner function string 255 RTMonWClassWindowTitle_POL();
external inner procedure SetupNightAuditWindowControls_POL(Boolean);
external inner procedure CURClassDefinitionPOL();
external inner function real DrawPaymentModesButtons_IV_POL(real);
external inner function real FunctionButtons_POL(string);
external inner procedure CreditCardWindowHeader_POL(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_POL(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_POL(Real);
external inner procedure CreditCardWindowDeliveryDetail_POL(Real);
external inner function real DrawPaymentModesButtons_POL();
external inner procedure DrawBarMenuTiles_POL(string);
external inner procedure DrawRestPMOtherPay_POL();
external inner procedure DisplayRecordDetailsRA_POL(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_POL(var integer,var integer);
external inner procedure OKCancel_POL();
external inner procedure DefineElearningURLCacheLClass_POL();
external inner procedure DefineElearningURLCacheDClass_POL();
external inner function real TravelLogDeductions_POL(real,real);
external inner procedure LoginButtons_POL(Real);
external inner procedure FORMDEF2_POL();
external inner procedure FORMDEF3_POL();
external inner procedure ARS2RClass_POL();
external inner procedure ALLVATRClass_POL();

// Language functions POR
external inner function Boolean DisplayLoginKeyPad_POR();
external inner function string 255 VATZoneEditFieldLabelPOR(Integer);
external inner function real VATZoneButtonsLabelsPOR(real,real,real,real);
external inner procedure LoginButtons2_POR(Real,Real);
external inner procedure FORMDEF_POR();
external inner function string 255 DemoMsgWClassTitle_POR(Boolean,Boolean);
external inner procedure TBEClassDef_POR();
external inner function string 255 VATZoneNamePOR();
external inner procedure TSERW_POR();
external inner procedure TSERWNT_POR();
external inner procedure TSERWTouch_POR();
external inner procedure TSERWTEST_POR();
external inner procedure INVFORM_POR(Boolean);
external inner procedure DisplayRecordDetails_POR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_POR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_POR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_POR();
external inner function string 255 ResMonWClassWindowTitle_POR();
external inner function string 255 RTMonWClassWindowTitle_POR();
external inner procedure SetupNightAuditWindowControls_POR(Boolean);
external inner procedure CURClassDefinitionPOR();
external inner function real DrawPaymentModesButtons_IV_POR(real);
external inner function real FunctionButtons_POR(string);
external inner procedure CreditCardWindowHeader_POR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_POR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_POR(Real);
external inner procedure CreditCardWindowDeliveryDetail_POR(Real);
external inner function real DrawPaymentModesButtons_POR();
external inner procedure DrawBarMenuTiles_POR(string);
external inner procedure DrawRestPMOtherPay_POR();
external inner procedure DisplayRecordDetailsRA_POR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_POR(var integer,var integer);
external inner procedure OKCancel_POR();
external inner procedure DefineElearningURLCacheLClass_POR();
external inner procedure DefineElearningURLCacheDClass_POR();
external inner function real TravelLogDeductions_POR(real,real);
external inner procedure LoginButtons_POR(Real);
external inner procedure FORMDEF2_POR();
external inner procedure FORMDEF3_POR();
external inner procedure ARS2RClass_POR();
external inner procedure ALLVATRClass_POR();

// Language functions ROM
external inner function Boolean DisplayLoginKeyPad_ROM();
external inner function string 255 VATZoneEditFieldLabelROM(Integer);
external inner function real VATZoneButtonsLabelsROM(real,real,real,real);
external inner procedure LoginButtons2_ROM(Real,Real);
external inner procedure FORMDEF_ROM();
external inner function string 255 DemoMsgWClassTitle_ROM(Boolean,Boolean);
external inner procedure TBEClassDef_ROM();
external inner function string 255 VATZoneNameROM();
external inner procedure TSERW_ROM();
external inner procedure TSERWNT_ROM();
external inner procedure TSERWTouch_ROM();
external inner procedure TSERWTEST_ROM();
external inner procedure INVFORM_ROM(Boolean);
external inner procedure DisplayRecordDetails_ROM(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_ROM(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ROM(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ROM();
external inner function string 255 ResMonWClassWindowTitle_ROM();
external inner function string 255 RTMonWClassWindowTitle_ROM();
external inner procedure SetupNightAuditWindowControls_ROM(Boolean);
external inner procedure CURClassDefinitionROM();
external inner function real DrawPaymentModesButtons_IV_ROM(real);
external inner function real FunctionButtons_ROM(string);
external inner procedure CreditCardWindowHeader_ROM(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ROM(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ROM(Real);
external inner procedure CreditCardWindowDeliveryDetail_ROM(Real);
external inner function real DrawPaymentModesButtons_ROM();
external inner procedure DrawBarMenuTiles_ROM(string);
external inner procedure DrawRestPMOtherPay_ROM();
external inner procedure DisplayRecordDetailsRA_ROM(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ROM(var integer,var integer);
external inner procedure OKCancel_ROM();
external inner procedure DefineElearningURLCacheLClass_ROM();
external inner procedure DefineElearningURLCacheDClass_ROM();
external inner function real TravelLogDeductions_ROM(real,real);
external inner procedure LoginButtons_ROM(Real);
external inner procedure FORMDEF2_ROM();
external inner procedure FORMDEF3_ROM();
external inner procedure ARS2RClass_ROM();
external inner procedure ALLVATRClass_ROM();

// Language functions RUS
external inner function Boolean DisplayLoginKeyPad_RUS();
external inner function string 255 VATZoneEditFieldLabelRUS(Integer);
external inner function real VATZoneButtonsLabelsRUS(real,real,real,real);
external inner procedure LoginButtons2_RUS(Real,Real);
external inner procedure FORMDEF_RUS();
external inner function string 255 DemoMsgWClassTitle_RUS(Boolean,Boolean);
external inner procedure TBEClassDef_RUS();
external inner function string 255 VATZoneNameRUS();
external inner procedure TSERW_RUS();
external inner procedure TSERWNT_RUS();
external inner procedure TSERWTouch_RUS();
external inner procedure TSERWTEST_RUS();
external inner procedure INVFORM_RUS(Boolean);
external inner procedure DisplayRecordDetails_RUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_RUS(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_RUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_RUS();
external inner function string 255 ResMonWClassWindowTitle_RUS();
external inner function string 255 RTMonWClassWindowTitle_RUS();
external inner procedure SetupNightAuditWindowControls_RUS(Boolean);
external inner procedure CURClassDefinitionRUS();
external inner function real DrawPaymentModesButtons_IV_RUS(real);
external inner function real FunctionButtons_RUS(string);
external inner procedure CreditCardWindowHeader_RUS(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_RUS(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_RUS(Real);
external inner procedure CreditCardWindowDeliveryDetail_RUS(Real);
external inner function real DrawPaymentModesButtons_RUS();
external inner procedure DrawBarMenuTiles_RUS(string);
external inner procedure DrawRestPMOtherPay_RUS();
external inner procedure DisplayRecordDetailsRA_RUS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_RUS(var integer,var integer);
external inner procedure OKCancel_RUS();
external inner procedure DefineElearningURLCacheLClass_RUS();
external inner procedure DefineElearningURLCacheDClass_RUS();
external inner function real TravelLogDeductions_RUS(real,real);
external inner procedure LoginButtons_RUS(Real);
external inner procedure FORMDEF2_RUS();
external inner procedure FORMDEF3_RUS();
external inner procedure ARS2RClass_RUS();
external inner procedure ALLVATRClass_RUS();

// Language functions SAF
external inner function Boolean DisplayLoginKeyPad_SAF();
external inner function string 255 VATZoneEditFieldLabelSAF(Integer);
external inner function real VATZoneButtonsLabelsSAF(real,real,real,real);
external inner procedure LoginButtons2_SAF(Real,Real);
external inner procedure FORMDEF_SAF();
external inner function string 255 DemoMsgWClassTitle_SAF(Boolean,Boolean);
external inner procedure TBEClassDef_SAF();
external inner function string 255 VATZoneNameSAF();
external inner procedure TSERW_SAF();
external inner procedure TSERWNT_SAF();
external inner procedure TSERWTouch_SAF();
external inner procedure TSERWTEST_SAF();
external inner procedure INVFORM_SAF(Boolean);
external inner procedure DisplayRecordDetails_SAF(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SAF(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SAF(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SAF();
external inner function string 255 ResMonWClassWindowTitle_SAF();
external inner function string 255 RTMonWClassWindowTitle_SAF();
external inner procedure SetupNightAuditWindowControls_SAF(Boolean);
external inner procedure CURClassDefinitionSAF();
external inner function real DrawPaymentModesButtons_IV_SAF(real);
external inner function real FunctionButtons_SAF(string);
external inner procedure CreditCardWindowHeader_SAF(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SAF(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SAF(Real);
external inner procedure CreditCardWindowDeliveryDetail_SAF(Real);
external inner function real DrawPaymentModesButtons_SAF();
external inner procedure DrawBarMenuTiles_SAF(string);
external inner procedure DrawRestPMOtherPay_SAF();
external inner procedure DisplayRecordDetailsRA_SAF(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SAF(var integer,var integer);
external inner procedure OKCancel_SAF();
external inner procedure DefineElearningURLCacheLClass_SAF();
external inner procedure DefineElearningURLCacheDClass_SAF();
external inner function real TravelLogDeductions_SAF(real,real);
external inner procedure LoginButtons_SAF(Real);
external inner procedure FORMDEF2_SAF();
external inner procedure FORMDEF3_SAF();
external inner procedure ARS2RClass_SAF();
external inner procedure ALLVATRClass_SAF();

// Language functions SER
external inner function Boolean DisplayLoginKeyPad_SER();
external inner function string 255 VATZoneEditFieldLabelSER(Integer);
external inner function real VATZoneButtonsLabelsSER(real,real,real,real);
external inner procedure LoginButtons2_SER(Real,Real);
external inner procedure FORMDEF_SER();
external inner function string 255 DemoMsgWClassTitle_SER(Boolean,Boolean);
external inner procedure TBEClassDef_SER();
external inner function string 255 VATZoneNameSER();
external inner procedure TSERW_SER();
external inner procedure TSERWNT_SER();
external inner procedure TSERWTouch_SER();
external inner procedure TSERWTEST_SER();
external inner procedure INVFORM_SER(Boolean);
external inner procedure DisplayRecordDetails_SER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SER(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SER();
external inner function string 255 ResMonWClassWindowTitle_SER();
external inner function string 255 RTMonWClassWindowTitle_SER();
external inner procedure SetupNightAuditWindowControls_SER(Boolean);
external inner procedure CURClassDefinitionSER();
external inner function real DrawPaymentModesButtons_IV_SER(real);
external inner function real FunctionButtons_SER(string);
external inner procedure CreditCardWindowHeader_SER(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SER(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SER(Real);
external inner procedure CreditCardWindowDeliveryDetail_SER(Real);
external inner function real DrawPaymentModesButtons_SER();
external inner procedure DrawBarMenuTiles_SER(string);
external inner procedure DrawRestPMOtherPay_SER();
external inner procedure DisplayRecordDetailsRA_SER(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SER(var integer,var integer);
external inner procedure OKCancel_SER();
external inner procedure DefineElearningURLCacheLClass_SER();
external inner procedure DefineElearningURLCacheDClass_SER();
external inner function real TravelLogDeductions_SER(real,real);
external inner procedure LoginButtons_SER(Real);
external inner procedure FORMDEF2_SER();
external inner procedure FORMDEF3_SER();
external inner procedure ARS2RClass_SER();
external inner procedure ALLVATRClass_SER();

// Language functions SGP
external inner function Boolean DisplayLoginKeyPad_SGP();
external inner function string 255 VATZoneEditFieldLabelSGP(Integer);
external inner function real VATZoneButtonsLabelsSGP(real,real,real,real);
external inner procedure LoginButtons2_SGP(Real,Real);
external inner procedure FORMDEF_SGP();
external inner function string 255 DemoMsgWClassTitle_SGP(Boolean,Boolean);
external inner procedure TBEClassDef_SGP();
external inner function string 255 VATZoneNameSGP();
external inner procedure TSERW_SGP();
external inner procedure TSERWNT_SGP();
external inner procedure TSERWTouch_SGP();
external inner procedure TSERWTEST_SGP();
external inner procedure INVFORM_SGP(Boolean);
external inner procedure DisplayRecordDetails_SGP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SGP(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SGP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SGP();
external inner function string 255 ResMonWClassWindowTitle_SGP();
external inner function string 255 RTMonWClassWindowTitle_SGP();
external inner procedure SetupNightAuditWindowControls_SGP(Boolean);
external inner procedure CURClassDefinitionSGP();
external inner function real DrawPaymentModesButtons_IV_SGP(real);
external inner function real FunctionButtons_SGP(string);
external inner procedure CreditCardWindowHeader_SGP(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SGP(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SGP(Real);
external inner procedure CreditCardWindowDeliveryDetail_SGP(Real);
external inner function real DrawPaymentModesButtons_SGP();
external inner procedure DrawBarMenuTiles_SGP(string);
external inner procedure DrawRestPMOtherPay_SGP();
external inner procedure DisplayRecordDetailsRA_SGP(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SGP(var integer,var integer);
external inner procedure OKCancel_SGP();
external inner procedure DefineElearningURLCacheLClass_SGP();
external inner procedure DefineElearningURLCacheDClass_SGP();
external inner function real TravelLogDeductions_SGP(real,real);
external inner procedure LoginButtons_SGP(Real);
external inner procedure FORMDEF2_SGP();
external inner procedure FORMDEF3_SGP();
external inner procedure ARS2RClass_SGP();
external inner procedure ALLVATRClass_SGP();

// Language functions SWE
external inner function Boolean DisplayLoginKeyPad_SWE();
external inner function string 255 VATZoneEditFieldLabelSWE(Integer);
external inner function real VATZoneButtonsLabelsSWE(real,real,real,real);
external inner procedure LoginButtons2_SWE(Real,Real);
external inner procedure FORMDEF_SWE();
external inner function string 255 DemoMsgWClassTitle_SWE(Boolean,Boolean);
external inner procedure TBEClassDef_SWE();
external inner function string 255 VATZoneNameSWE();
external inner procedure TSERW_SWE();
external inner procedure TSERWNT_SWE();
external inner procedure TSERWTouch_SWE();
external inner procedure TSERWTEST_SWE();
external inner procedure INVFORM_SWE(Boolean);
external inner procedure DisplayRecordDetails_SWE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SWE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SWE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SWE();
external inner function string 255 ResMonWClassWindowTitle_SWE();
external inner function string 255 RTMonWClassWindowTitle_SWE();
external inner procedure SetupNightAuditWindowControls_SWE(Boolean);
external inner procedure CURClassDefinitionSWE();
external inner function real DrawPaymentModesButtons_IV_SWE(real);
external inner function real FunctionButtons_SWE(string);
external inner procedure CreditCardWindowHeader_SWE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SWE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SWE(Real);
external inner procedure CreditCardWindowDeliveryDetail_SWE(Real);
external inner function real DrawPaymentModesButtons_SWE();
external inner procedure DrawBarMenuTiles_SWE(string);
external inner procedure DrawRestPMOtherPay_SWE();
external inner procedure DisplayRecordDetailsRA_SWE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SWE(var integer,var integer);
external inner procedure OKCancel_SWE();
external inner procedure DefineElearningURLCacheLClass_SWE();
external inner procedure DefineElearningURLCacheDClass_SWE();
external inner function real TravelLogDeductions_SWE(real,real);
external inner procedure LoginButtons_SWE(Real);
external inner procedure FORMDEF2_SWE();
external inner procedure FORMDEF3_SWE();
external inner procedure ARS2RClass_SWE();
external inner procedure ALLVATRClass_SWE();

// Language functions SLO
external inner function Boolean DisplayLoginKeyPad_SLO();
external inner function string 255 VATZoneEditFieldLabelSLO(Integer);
external inner function real VATZoneButtonsLabelsSLO(real,real,real,real);
external inner procedure LoginButtons2_SLO(Real,Real);
external inner procedure FORMDEF_SLO();
external inner function string 255 DemoMsgWClassTitle_SLO(Boolean,Boolean);
external inner procedure TBEClassDef_SLO();
external inner function string 255 VATZoneNameSLO();
external inner procedure TSERW_SLO();
external inner procedure TSERWNT_SLO();
external inner procedure TSERWTouch_SLO();
external inner procedure TSERWTEST_SLO();
external inner procedure INVFORM_SLO(Boolean);
external inner procedure DisplayRecordDetails_SLO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SLO(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SLO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SLO();
external inner function string 255 ResMonWClassWindowTitle_SLO();
external inner function string 255 RTMonWClassWindowTitle_SLO();
external inner procedure SetupNightAuditWindowControls_SLO(Boolean);
external inner procedure CURClassDefinitionSLO();
external inner function real DrawPaymentModesButtons_IV_SLO(real);
external inner function real FunctionButtons_SLO(string);
external inner procedure CreditCardWindowHeader_SLO(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SLO(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SLO(Real);
external inner procedure CreditCardWindowDeliveryDetail_SLO(Real);
external inner function real DrawPaymentModesButtons_SLO();
external inner procedure DrawBarMenuTiles_SLO(string);
external inner procedure DrawRestPMOtherPay_SLO();
external inner procedure DisplayRecordDetailsRA_SLO(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SLO(var integer,var integer);
external inner procedure OKCancel_SLO();
external inner procedure DefineElearningURLCacheLClass_SLO();
external inner procedure DefineElearningURLCacheDClass_SLO();
external inner function real TravelLogDeductions_SLO(real,real);
external inner procedure LoginButtons_SLO(Real);
external inner procedure FORMDEF2_SLO();
external inner procedure FORMDEF3_SLO();
external inner procedure ARS2RClass_SLO();
external inner procedure ALLVATRClass_SLO();

// Language functions SVK
external inner function Boolean DisplayLoginKeyPad_SVK();
external inner function string 255 VATZoneEditFieldLabelSVK(Integer);
external inner function real VATZoneButtonsLabelsSVK(real,real,real,real);
external inner procedure LoginButtons2_SVK(Real,Real);
external inner procedure FORMDEF_SVK();
external inner function string 255 DemoMsgWClassTitle_SVK(Boolean,Boolean);
external inner procedure TBEClassDef_SVK();
external inner function string 255 VATZoneNameSVK();
external inner procedure TSERW_SVK();
external inner procedure TSERWNT_SVK();
external inner procedure TSERWTouch_SVK();
external inner procedure TSERWTEST_SVK();
external inner procedure INVFORM_SVK(Boolean);
external inner procedure DisplayRecordDetails_SVK(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_SVK(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_SVK(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_SVK();
external inner function string 255 ResMonWClassWindowTitle_SVK();
external inner function string 255 RTMonWClassWindowTitle_SVK();
external inner procedure SetupNightAuditWindowControls_SVK(Boolean);
external inner procedure CURClassDefinitionSVK();
external inner function real DrawPaymentModesButtons_IV_SVK(real);
external inner function real FunctionButtons_SVK(string);
external inner procedure CreditCardWindowHeader_SVK(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_SVK(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_SVK(Real);
external inner procedure CreditCardWindowDeliveryDetail_SVK(Real);
external inner function real DrawPaymentModesButtons_SVK();
external inner procedure DrawBarMenuTiles_SVK(string);
external inner procedure DrawRestPMOtherPay_SVK();
external inner procedure DisplayRecordDetailsRA_SVK(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_SVK(var integer,var integer);
external inner procedure OKCancel_SVK();
external inner procedure DefineElearningURLCacheLClass_SVK();
external inner procedure DefineElearningURLCacheDClass_SVK();
external inner function real TravelLogDeductions_SVK(real,real);
external inner procedure LoginButtons_SVK(Real);
external inner procedure FORMDEF2_SVK();
external inner procedure FORMDEF3_SVK();
external inner procedure ARS2RClass_SVK();
external inner procedure ALLVATRClass_SVK();

// Language functions TUR
external inner function Boolean DisplayLoginKeyPad_TUR();
external inner function string 255 VATZoneEditFieldLabelTUR(Integer);
external inner function real VATZoneButtonsLabelsTUR(real,real,real,real);
external inner procedure LoginButtons2_TUR(Real,Real);
external inner procedure FORMDEF_TUR();
external inner function string 255 DemoMsgWClassTitle_TUR(Boolean,Boolean);
external inner procedure TBEClassDef_TUR();
external inner function string 255 VATZoneNameTUR();
external inner procedure TSERW_TUR();
external inner procedure TSERWNT_TUR();
external inner procedure TSERWTouch_TUR();
external inner procedure TSERWTEST_TUR();
external inner procedure INVFORM_TUR(Boolean);
external inner procedure DisplayRecordDetails_TUR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_TUR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_TUR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_TUR();
external inner function string 255 ResMonWClassWindowTitle_TUR();
external inner function string 255 RTMonWClassWindowTitle_TUR();
external inner procedure SetupNightAuditWindowControls_TUR(Boolean);
external inner procedure CURClassDefinitionTUR();
external inner function real DrawPaymentModesButtons_IV_TUR(real);
external inner function real FunctionButtons_TUR(string);
external inner procedure CreditCardWindowHeader_TUR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_TUR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_TUR(Real);
external inner procedure CreditCardWindowDeliveryDetail_TUR(Real);
external inner function real DrawPaymentModesButtons_TUR();
external inner procedure DrawBarMenuTiles_TUR(string);
external inner procedure DrawRestPMOtherPay_TUR();
external inner procedure DisplayRecordDetailsRA_TUR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_TUR(var integer,var integer);
external inner procedure OKCancel_TUR();
external inner procedure DefineElearningURLCacheLClass_TUR();
external inner procedure DefineElearningURLCacheDClass_TUR();
external inner function real TravelLogDeductions_TUR(real,real);
external inner procedure LoginButtons_TUR(Real);
external inner procedure FORMDEF2_TUR();
external inner procedure FORMDEF3_TUR();
external inner procedure ARS2RClass_TUR();
external inner procedure ALLVATRClass_TUR();

// Language functions UKR
external inner function Boolean DisplayLoginKeyPad_UKR();
external inner function string 255 VATZoneEditFieldLabelUKR(Integer);
external inner function real VATZoneButtonsLabelsUKR(real,real,real,real);
external inner procedure LoginButtons2_UKR(Real,Real);
external inner procedure FORMDEF_UKR();
external inner function string 255 DemoMsgWClassTitle_UKR(Boolean,Boolean);
external inner procedure TBEClassDef_UKR();
external inner function string 255 VATZoneNameUKR();
external inner procedure TSERW_UKR();
external inner procedure TSERWNT_UKR();
external inner procedure TSERWTouch_UKR();
external inner procedure TSERWTEST_UKR();
external inner procedure INVFORM_UKR(Boolean);
external inner procedure DisplayRecordDetails_UKR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_UKR(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_UKR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_UKR();
external inner function string 255 ResMonWClassWindowTitle_UKR();
external inner function string 255 RTMonWClassWindowTitle_UKR();
external inner procedure SetupNightAuditWindowControls_UKR(Boolean);
external inner procedure CURClassDefinitionUKR();
external inner function real DrawPaymentModesButtons_IV_UKR(real);
external inner function real FunctionButtons_UKR(string);
external inner procedure CreditCardWindowHeader_UKR(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_UKR(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_UKR(Real);
external inner procedure CreditCardWindowDeliveryDetail_UKR(Real);
external inner function real DrawPaymentModesButtons_UKR();
external inner procedure DrawBarMenuTiles_UKR(string);
external inner procedure DrawRestPMOtherPay_UKR();
external inner procedure DisplayRecordDetailsRA_UKR(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_UKR(var integer,var integer);
external inner procedure OKCancel_UKR();
external inner procedure DefineElearningURLCacheLClass_UKR();
external inner procedure DefineElearningURLCacheDClass_UKR();
external inner function real TravelLogDeductions_UKR(real,real);
external inner procedure LoginButtons_UKR(Real);
external inner procedure FORMDEF2_UKR();
external inner procedure FORMDEF3_UKR();
external inner procedure ARS2RClass_UKR();
external inner procedure ALLVATRClass_UKR();

// Language functions USA
external inner function Boolean DisplayLoginKeyPad_USA();
external inner function string 255 VATZoneEditFieldLabelUSA(Integer);
external inner function real VATZoneButtonsLabelsUSA(real,real,real,real);
external inner procedure LoginButtons2_USA(Real,Real);
external inner procedure FORMDEF_USA();
external inner function string 255 DemoMsgWClassTitle_USA(Boolean,Boolean);
external inner procedure TBEClassDef_USA();
external inner function string 255 VATZoneNameUSA();
external inner procedure TSERW_USA();
external inner procedure TSERWNT_USA();
external inner procedure TSERWTouch_USA();
external inner procedure TSERWTEST_USA();
external inner procedure INVFORM_USA(Boolean);
external inner procedure DisplayRecordDetails_USA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_USA(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_USA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_USA();
external inner function string 255 ResMonWClassWindowTitle_USA();
external inner function string 255 RTMonWClassWindowTitle_USA();
external inner procedure SetupNightAuditWindowControls_USA(Boolean);
external inner procedure CURClassDefinitionUSA();
external inner function real DrawPaymentModesButtons_IV_USA(real);
external inner function real FunctionButtons_USA(string);
external inner procedure CreditCardWindowHeader_USA(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_USA(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_USA(Real);
external inner procedure CreditCardWindowDeliveryDetail_USA(Real);
external inner function real DrawPaymentModesButtons_USA();
external inner procedure DrawBarMenuTiles_USA(string);
external inner procedure DrawRestPMOtherPay_USA();
external inner procedure DisplayRecordDetailsRA_USA(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_USA(var integer,var integer);
external inner procedure OKCancel_USA();
external inner procedure DefineElearningURLCacheLClass_USA();
external inner procedure DefineElearningURLCacheDClass_USA();
external inner function real TravelLogDeductions_USA(real,real);
external inner procedure LoginButtons_USA(Real);
external inner procedure FORMDEF2_USA();
external inner procedure FORMDEF3_USA();
external inner procedure ARS2RClass_USA();
external inner procedure ALLVATRClass_USA();

// Language functions USS
external inner function Boolean DisplayLoginKeyPad_USS();
external inner function string 255 VATZoneEditFieldLabelUSS(Integer);
external inner function real VATZoneButtonsLabelsUSS(real,real,real,real);
external inner procedure LoginButtons2_USS(Real,Real);
external inner procedure FORMDEF_USS();
external inner function string 255 DemoMsgWClassTitle_USS(Boolean,Boolean);
external inner procedure TBEClassDef_USS();
external inner function string 255 VATZoneNameUSS();
external inner procedure TSERW_USS();
external inner procedure TSERWNT_USS();
external inner procedure TSERWTouch_USS();
external inner procedure TSERWTEST_USS();
external inner procedure INVFORM_USS(Boolean);
external inner procedure DisplayRecordDetails_USS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_USS(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_USS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_USS();
external inner function string 255 ResMonWClassWindowTitle_USS();
external inner function string 255 RTMonWClassWindowTitle_USS();
external inner procedure SetupNightAuditWindowControls_USS(Boolean);
external inner procedure CURClassDefinitionUSS();
external inner function real DrawPaymentModesButtons_IV_USS(real);
external inner function real FunctionButtons_USS(string);
external inner procedure CreditCardWindowHeader_USS(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_USS(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_USS(Real);
external inner procedure CreditCardWindowDeliveryDetail_USS(Real);
external inner function real DrawPaymentModesButtons_USS();
external inner procedure DrawBarMenuTiles_USS(string);
external inner procedure DrawRestPMOtherPay_USS();
external inner procedure DisplayRecordDetailsRA_USS(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_USS(var integer,var integer);
external inner procedure OKCancel_USS();
external inner procedure DefineElearningURLCacheLClass_USS();
external inner procedure DefineElearningURLCacheDClass_USS();
external inner function real TravelLogDeductions_USS(real,real);
external inner procedure LoginButtons_USS(Real);
external inner procedure FORMDEF2_USS();
external inner procedure FORMDEF3_USS();
external inner procedure ARS2RClass_USS();
external inner procedure ALLVATRClass_USS();

// Language functions VIE
external inner function Boolean DisplayLoginKeyPad_VIE();
external inner function string 255 VATZoneEditFieldLabelVIE(Integer);
external inner function real VATZoneButtonsLabelsVIE(real,real,real,real);
external inner procedure LoginButtons2_VIE(Real,Real);
external inner procedure FORMDEF_VIE();
external inner function string 255 DemoMsgWClassTitle_VIE(Boolean,Boolean);
external inner procedure TBEClassDef_VIE();
external inner function string 255 VATZoneNameVIE();
external inner procedure TSERW_VIE();
external inner procedure TSERWNT_VIE();
external inner procedure TSERWTouch_VIE();
external inner procedure TSERWTEST_VIE();
external inner procedure INVFORM_VIE(Boolean);
external inner procedure DisplayRecordDetails_VIE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface_VIE(string,string,record POSButtonsVc,Integer,string,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_VIE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_VIE();
external inner function string 255 ResMonWClassWindowTitle_VIE();
external inner function string 255 RTMonWClassWindowTitle_VIE();
external inner procedure SetupNightAuditWindowControls_VIE(Boolean);
external inner procedure CURClassDefinitionVIE();
external inner function real DrawPaymentModesButtons_IV_VIE(real);
external inner function real FunctionButtons_VIE(string);
external inner procedure CreditCardWindowHeader_VIE(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_VIE(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_VIE(Real);
external inner procedure CreditCardWindowDeliveryDetail_VIE(Real);
external inner function real DrawPaymentModesButtons_VIE();
external inner procedure DrawBarMenuTiles_VIE(string);
external inner procedure DrawRestPMOtherPay_VIE();
external inner procedure DisplayRecordDetailsRA_VIE(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_VIE(var integer,var integer);
external inner procedure OKCancel_VIE();
external inner procedure DefineElearningURLCacheLClass_VIE();
external inner procedure DefineElearningURLCacheDClass_VIE();
external inner function real TravelLogDeductions_VIE(real,real);
external inner procedure LoginButtons_VIE(Real);
external inner procedure FORMDEF2_VIE();
external inner procedure FORMDEF3_VIE();
external inner procedure ARS2RClass_VIE();
external inner procedure ALLVATRClass_VIE();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
event DefineWindows
begin
  real i,h,h1,h2,h3,h4,h5,h6,hs,v,vs,vm,hl,l,t,f,tilenr,flipnr;
  string 255 label;

  SetLangMode(LangRussian,"RUS",2);
  WindowBegin("Авансовые отчеты",ExpLClass,CGmlist,-);
  SetWRect(20,80,700,298);
  Sizeable(-1,-1,0,0);
  SpawnClass(ExpDClass);
  UseView(ExpVc);
  FormName(PrintExpL);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,    "Номер",SerNr,false,SerNr);
  RlColKeyTL(71,57,"OK",M4Mark,OKFlag,false,OKFlag);
  RlColKey(96,96,"Дата операции",TransDate,false,TransDate);
  RlColKey(221,221,"Сотрудник",Person,false,Person);
  RlColKey(305,305,"ФИО",Name,false,Name);
  RlColKey(-150,-150,"Сумма",PayVal,true,SerNr);
  //RlColKey(550,550,"Объект",Objects,true,SerNr);
  RlCol(-60,-60,"Вал.",CurncyCode,true);
 
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Найти");
  BrowseSubsetButton(-40,-15);
  SpecialMenu("OK",'G',0,"OKExpLsm");
  EndWindow;
 
  
  WindowBegin("Заказы поставщикам",POLClass,CGmlist,POView);
  SpawnClass(PODClass);
  SetWRect(64,80,650,298);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  FormName(PrintPOL);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Номер",SerNr,false,SerNr);
  RlColKey(76,76,"Дата",TransDate,false,TransDate);
  RlColKey(150,150,"OK",OKFlag,false,OKFlag);
  RlColKey(176,176,"Пост.",PUFlag,false,PUFlag);
  RlColKey(210,210," Сч/ф",PIFlag,false,InvFlag);
  RlColKey(250,250,"Код",VECode,false,VECode);
  RlColKey(320,320,"Наименование",Addr0,false,Name);
  RlColKey(400,400,"Сумма",Sum4,true,SerNr);
  RlColKey(500,500,"Ссылка",Reference,false,Reference);
  SearchField("Найти");
  BrowseSubsetButton(-40,-15);
  SpecialMenu("OK",'G',0,"OKPOLsm");
  SpecialMenu("Закрыть",' ',1,"ClosePOLsm");
  SpecialMenu("Создать поступление",' ',2,"PUFromPOLsm");  
  SpecialMenu("Сделать заказы поставщикам",' ',3,"POCreatePOLsm");
  SpecialMenu("Статус заказа поставщику",' ',4,"POStatusORLsm");
  EndWindow;
  
  

  vs = 20;
  WindowBegin("Заказ поставщику",PODClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  CommunicateButton;
  ActiveFieldOnNew("VECode");
  Tile(0,74,false,"",VECode);
  EditField(75,vm=(v=6),95,"Номер",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Поставщик",Normal,VECode,false,VESClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Наим.",Normal,Addr0,false,0);
  if (IsEnterprise) then begin
    EditField(h,vm=(v+=20),95,"Подписи",Normal,OKPersons,false,UserSClass);
    CheckBox(h4=-100,v,0,"ОК",OKFlag);
  end else begin
    CheckBox(h4=-100,v+=vs,0,"OK",OKFlag);
  end;
  tilenr = 1;
  TileButton(tilenr,"Условия"); tilenr = tilenr + 1;
  TileButton(tilenr,"Товары"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Валюта"); tilenr = tilenr + 1;
  end;
  if (HasModIN) then begin
    TileButton(tilenr,"Усл. отгрузки"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Комментарий"); tilenr = tilenr + 1;
  TileButton(tilenr,"Адрес зак."); tilenr = tilenr + 1;
  TileButton(tilenr,"Адрес дост."); tilenr = tilenr + 1;
  if (IsEnterprise and StandardHansa==false) then begin
    TileButton(tilenr,"Доп. затр."); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Дата",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Условия оплаты",Normal,PayDeal,false,PDSClass);
  if (IsEnterprise) then begin
    EditField(h1,v+=vs,82,"Действителен до",Normal,ValidUntil,false,PasteCurDate);
  end;
  /*if (HasModIN) then begin// Edit ************************** Wednesday, 4 October 2017 16:14:33
    EditField(h1,v+=vs,82,"Заплан.отгрузка",Normal,PlanShip,false,PasteCurDate);
  end;*/
  EditField(h1,v+=vs,-20,"Комментарий",Normal,Comment,false,0);
  EditField(h2,v=vm,135,"Наша ссылка",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Внимание",Normal,VEContact,false,ContactSClass);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Объекты",Normal,Objects,false,ObjSClass);
  end;
  /*if (HasModIN) then begin// Edit ************************** Thursday, 5 October 2017 10:18:53
    EditField(h2,v+=vs,135,"Рекомендатель",Normal,Reference,false,0);
  end;*/
  if (HasSalesman) then begin
    EditField(h3,v=vm,80,"Продавец",Normal,SalesMan,false,UserSClass);
  end;
  if (HasModTS) then begin
    EditField(h3,v+=vs,80,"Проект",Normal,PRCode,false,PRSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h3,v+=vs,80,"Вид заказа пост.",Normal,POClass,false,POrderClassSClass);
    //EditField(h3,v+=vs,80,"Тип счета",ViewOnly,OrderType,false,0);// Edit ************************** Thursday, 5 October 2017 10:19:08
  end;
  CheckBox(h4,v=6,0,"Закрыт",Closed);

  CheckBox(h4,v+=16,0,"Цена вкл. НДС",InclVAT);  
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(110,-41,70,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    //EditField(110,-21,70,"Паллеты",ViewOnly,TotPalletNr,true,0);// Edit ************************** Monday, 24 July 2017 15:36:14
    EditField(110,-21,70,"Кол-во",ViewOnly,TotQuant,true,0);// Edit ************************** Monday, 24 July 2017 15:36:15
    EditField(260,-41,70,"Фрахт",Normal,ShipCost,true,0);
    EditField(260,-21,70,"Таможня",Normal,CustomsCost,true,0);
  end;
  EditField(410,-41,70,"НДС",ViewOnly,Sum3,true,0);
  EditField(410,-21,70,"Внеш. нал.",ViewOnly,TAX1Sum,false,0);

  EditField(-169,-41,118,"Подытог",ViewOnly,Sum1,true,0);
  EditField(-169,-21,118,"Итого",ViewOnly,Sum4,true,0);
//  CheckBox(20,-21,0,"OK",OKFlag);
  v = 24;
  if (HasModIN or HasModPL or HasObjects) then begin
    MatrixBegin(3,v,-50,-44,-,199);
  end else begin
    MatrixBegin(3,v,-25,-44,-,199);
  end;
  MatTypedRow(stp);
  Flip(0);
  MatCol(1,28,"Товар",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(1,150,"К-во",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,150,"К-во",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
//  MatCol(1,194,"Описание",0,Spec,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatColTL(1,210,"Ед.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,230,"Наименование",0,Spec,false,0);
  if (HasJewelleryInterface) then begin
    MatCol(1,-337,"Тип склада",0,StockType,false,SetSClass);
  end;
  MatCol(1,-180,"Цена",0,Price,true,0);
  MatCol(1,-120,"%",0,vRebate,true,0);
  MatCol(1,-90,"Сумма",0,Sum,true,0);

  MatCol(1,-30,"НДС",0,VATCode,false,VATCodeSClass);
  if (HasObjects) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,164,"Наименование",0,Spec,false,0);
    if (IsEnterprise) then begin
      MatCol(1,-310,"Счёт опр.",0,CostAcc,false,AccSClass);
    end;
    MatCol(1,-240,"Объекты",0,Objects,false,ObjSClass);
    if (IsEnterprise) then begin
      MatCol(1,-170,"Товар пост.",0,VEArtCode,false,PISClass);
      MatColTL(1,-100,"Ед.пост.",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);//MatCol(1);
      MatCol(1,-50,"Кол. пост.",0,VEQuant,true,0);
    end;
  end;
  if (HasModIN) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,164,"Наименование",0,Spec,false,0);
    MatCol(1,-330,"Пост. 1",0,Shipd1,true,0);
    MatCol(1,-270,"Пост. 2",0,Shipd2,true,0);
    if (HasModPL) then begin
      MatCol(1,-210,"Сч/ф",0,Invd,true,0);
    end;
    if (HasModWHM) then begin
      MatCol(1,-150,"№ паллеты",0,PalletNr,true,0);
    end;
    if (HasModTS) then begin
      MatCol(1,-90,"Проект",0,PRCode,true,PRSClass);
    end;
    if (HasModSVO) then begin
      MatCol(1,-40,"№ ТР.",0,WSNr,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    if (StandardHansa==false) then begin
      MatCol(1,164,"Тип заказа",0,OrderType,false,0);
      MatCol(1,-400,"Тип склада",0,StockType,false,SetSClass);
    end else begin
      MatCol(1,164,"Наименование",0,Spec,false,0);
    end;
    if (HasTREO) then begin
      MatCol(1,-300,"TREO",0,TREO,false,SetSClass);
    end;
    MatCol(1,-200,"Запл. отгрузка",0,PlanShipRow,true,PasteCurDate);
    MatCol(1,-100,"Комментарий",0,Comment,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,164,"Наименование",0,Spec,false,0);
      MatCol(1,-420,"Фрахт",0,ShipCost,true,0);
      MatCol(1,-360,"Таможня",0,CustomsCost,true,0);
      label = UserDefined("AccBlock","PUCost1");
      if (blank(label)) then begin label = "Затраты 1";end;
      MatCol(1,-300,label,0,RowCost1,true,0);
      label = UserDefined("AccBlock","PUCost2");
      if (blank(label)) then begin label = "Затраты 2";end;
      MatCol(1,-240,label,0,RowCost2,true,0);
      label = UserDefined("AccBlock","PUCost3");
      if (blank(label)) then begin label = "Затраты 3";end;
      MatCol(1,-180,label,0,RowCost3,true,0);
      label = UserDefined("AccBlock","PUCost4");
      if (blank(label)) then begin label = "Затраты 4";end;
      MatCol(1,-120,label,0,RowCost4,true,0);
      label = UserDefined("AccBlock","PUCost5");
      if (blank(label)) then begin label = "Затраты 5";end;
      MatCol(1,-60,label,0,RowCost5,true,0);
    end;
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");         
  if (HasModIN and GuiType!=kGuiAndroid) then begin
    RowMenuItem(0,"Статус товара",'I','I',0,"ItemStatusPODsm");         
  end;
  if (IsEnterprise) then begin
    RowMenuItem(0,"Предыдущие цены по продажам",' ',' ',0,"POLastPPrsm");         
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20; h = 110; h2 = 295;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Осноная валюта 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Осноная валюта",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Осноная валюта 2",Normal,BaseRate2,true,0);  
      end;
      EditField(h2=295,v,50,"Курс",Normal,FrRate,true,0);  
      
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Осноная валюта 1",false);  
      	RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Осноная валюта 2",false);         
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Осноная валюта",false);      
      end;
    end else begin
      EditField(h1,v+=vs,50,"Осноная валюта 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Осноная валюта 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (HasModIN) then begin
    Tile(tilenr,90,false,tilenr,ShipDeal); tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    EditField(h1,v=6,80,"Условия доставки",Normal,ShipDeal,false,ShipDealSClass);
    if (IsEnterprise) then begin
      EditField(h1,v+=vs,80,"Метод доставки",Normal,ShipMode,false,DMSClass);
    end;
    if (HasMultiLocations) then begin
      EditField(h1,v+=vs,80,"Склад",Normal,Location,false,LocationSClass);
    end;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,80,"Подразделение",ViewOnly,BranchID,false,0);
        EditField(h2,v=vm,80,"Заказ на обсл.",Normal,SVONr,false,0);
        EditField(h2,v+=vs,80,"№ зак. на работу",Normal,WONr,false,0);
        EditField(h2,v+=vs,80,"№ процесса",Normal,POCQStatNr,true,POCQStatSClass);
        EditField(h2,v+=vs,80,"№ контракта",ViewOnly,POCOSerNr,true,0);
      end;
      CheckBox(473,v=vm,0,"Счёт перед поступл. товара",InvBeforePU);
      CheckBox(473,v+=vs,0,"Обнулить поступление товара",SetZeroPUQuant);
      EditField(h3,v+=vs,80,"Код транспорта интрастат",Normal,IntrastatTransCode,false,IntrastatTransCodeSClass);  
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,90,false,tilenr,LangCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Дискон. матрица",Normal,RebCode,false,RebSClass);
    if (StandardHansa==false) then begin
      EditField(h1,v+=vs,80,"Факторинг",Normal,VEFactoring,false,VESClass);
    end;
    EditField(h1,v+=vs,80,"№ заказа",Normal,OrdNr,false,0);
    EditField(h1,v+=vs,-20,"Комментарий",Normal,Comment,false,0);
    if (HasSalesGroup) then begin
      EditField(h2,v=vm,80,"Группа продаж",Normal,SalesGroup,false,SalesGroupSClass);
      EditField(h2,v+=vs,80,"Сч/ф на",Normal,InvoiceToCode,false,VESClass);
    end;
    EditField(h2,v+=vs,80,"Ст-сть покупки",Normal,CostPerUnit,true,0);
    if (HasLanguages) then begin
      EditField(h3,v=vm,80,"Язык",Normal,LangCode,false,LangSClass);
    end;
  end else begin
    Tile(tilenr,20,false,tilenr,Comment); tilenr = tilenr + 1;
    if (HasAdvancedPricing) then begin
      EditField(h1,v=6,80,"Дискон. матрица",Normal,RebCode,false,RebSClass);
    end else begin
      EditField(h1,v=6,-20,"Коммент.",Normal,Comment,false,0);
    end;
    if (HasLanguages) then begin
      EditField(h1,v+=vs,80,"Язык",Normal,LangCode,false,LangSClass);         
    end;    
  end;
  Tile(tilenr,230,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Ordering"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Адрес"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,vm=(v+=vs), -20,label,Normal,InvAddr4,false,0);
  vm = vm + 40;
  
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=vm,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
  end;
 
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelsRUS(h3=290,v=vm,140,16);
  end;
  if (IsEnterprise) then begin
    EditField(h2=-170,v=vm,150,"Регион",Normal,Region,false,RegionSClass);
  end;
  Tile(tilenr,130,false,tilenr,ShipAddr0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Доставка",Normal,ShipAddr0,false,0);
  EditField(h,v+=vs,-20,"Адрес",Normal,ShipAddr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr4,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,ShipCost); tilenr = tilenr + 1;
    vs = 20; h2 = 290; h3 = 530;
    label = UserDefined("AccBlock","PUCost1");
    if (blank(label)) then begin label = "Накл. расходы 1";end;
    EditField(h1,v=6,70,label,Normal,Cost1,true,0);
    label = UserDefined("AccBlock","PUCost2");
    if (blank(label)) then begin label = "Накл. расходы 2";end;
    EditField(h2,v,70,label,Normal,Cost2,true,0);
    label = UserDefined("AccBlock","PUCost3");
    if (blank(label)) then begin label = "Накл. расходы 3";end;
    EditField(h1,v+=vs,70,label,Normal,Cost3,true,0);
    label = UserDefined("AccBlock","PUCost4");
    if (blank(label)) then begin label = "Накл. расходы 4";end;
    EditField(h2,v,70,label,Normal,Cost4,true,0);
    label = UserDefined("AccBlock","PUCost5");
    if (blank(label)) then begin label = "Накл. расходы 5";end;
    EditField(h1,v+=vs,70,label,Normal,Cost5,true,0);
    EnterSkip(TransDate);
    ButtonFrame(h3,v=16,130,2,"Расчет накл. затрат");
    RadioButton(h3,v,0,0,"Стоимость",ExtraCostsCalculation);
    RadioButton(h3,v+=16,1,0,"Вес",ExtraCostsCalculation);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    if (HasModIN) then begin
      SpecialMenu("Статус товара",'I',2,"ItemStatusPODsm");
    end;
    SpecialMenu("Статус заказа поставщику",'r',5,"POStatRnPODsm");
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
    if (HasModIN) then begin
      SpecialMenu("Создать поступление",'L',0,"PUFromPODsm");
    end;
    if (HasModPL) then begin
      SpecialMenu("Создать реализацию",'F',1,"VIFromPODsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Создать возврат товаров",'B',6,"RetPUFromPODsm");
    end;

  end else begin
  SpecialMenu("Поиск товара",'f',1,"ItemSearchDsm");         
  SpecialMenu("Статус заказа поставщику",'r',5,"POStatRnPODsm");         
  if (IsEnterprise) then begin
    SpecialMenu("Резервации",' ',6,"POReservPODsm");         
  end;
  if (HasApprovals) then begin
    SpecialMenu("Запросить утверждение",' ',6,"POSendforAcceptancePODsm"); 
    SpecialMenu("Отменить запрос утверждения",' ',2,"CancelApprovalRequestDsm"); 
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
  if (HasModCRM) then begin
  end;
  if (HasDownpayments) then begin
    SpecialMenu("Счёт на предоплату",' ',3,"DownPayFromPODsm"); 
  end;
  if (HaseMail) then begin
    SpecialMenu("Эл. письмо",'m',3,"CreateMailFromPODsm");         
  end;
  if (HasModIN) then begin
    SpecialMenu("Поступление",'L',0,"PUFromPODsm");
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    SpecialMenu("Уведомление об отгрузке",'l',0,"DropSHFromPODsm");
  end;
  if (HasModPL) then begin
    SpecialMenu("Реализацию",'F',1,"VIFromPODsm");
  end;
  if (HasRetGoodsToSupp and HasModIN) then begin
    SpecialMenu("Возврат товаров",'B',6,"RetPUFromPODsm");
  end;
  end;
  EndWindow;
  
  
    WindowBegin("Счет клиенту",ORDClass,CGview,-);
  SetWRect(20,80,660,460);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");    
  CommunicateButton;
  Tile(0,48+24,false,"",CustCode);
  EditField(75,vm=(v=6), 82,"Номер",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95, "Клиент",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  CheckBox(230,vm,0,"Закрыт",Closed);
  CheckBox(310,vm,0,"Зарезервировано",Reserved);
  EditField(h=270,v,-40,"Наименование",Normal,Addr0,false,0);
  TileButton(1,"Дата");
  TileButton(2,"Товары");
  TileButton(3,"Валюта");
  TileButton(4,"Условия");
  TileButton(5,"Адрес");
  TileButton(6,"Адрес отгрузки");
  Tile(1,88,false,"1",OrdDate);
  vs = 20;
  EditField(h1=110,vm=(v=6),82,"Дата",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs, 25,"Условия оплаты",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs, 120,"Ответственный",Normal,OurContact,false,0);
  //EditField(h1,v+=vs, 120,"Объект",Normal,Objects,false,ObjSClass);// Edit ************************** Monday, 28 August 2017 16:34:09
  EditField(h1,v+=vs,-20,"Комментарий",Normal,Comment,false,0);
  EditField(h2=350,v=vm,100,"Заплан. отгрузка",Normal,PlanShip,false,PasteCurDate);
  EditField(522,v,75,"Дата отпр.",Normal,DespatchDate,false,PasteCurDate);
  EditField(645,v,-10,"Время",Normal,DespatchTime,false,PasteCurTime);
  EditField(h2,v+=vs,60,   "Продавец",Normal,SalesMan,false,UserSClass);
  EditField(522,v,75,"Тип счета",Normal,OrderType,false,SetSClass);
  EditField(h2,v+=vs,-10,"Контактное лицо",Normal,CustContact,false,ContactSClass);
  //EditField(h2,v+=vs,200,"№ заказа клиента",Normal,CustOrdNr,false,0);// Edit ************************** Monday, 28 August 2017 16:34:00
  //EditField(645,v,-10,"Тип",Normal,OrderClass,false,OrderClassSClass);// Edit ************************** Monday, 28 August 2017 16:34:04
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(65,-41,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(180,-41,70,"Фрахт",Normal,FrPrice,true,0);
  //EditField(180,-21,70,"Доп. налог",ViewOnly,TAX1Sum,true,0);// Edit ************************** Tuesday, 17 January 2017 10:37:40
  //EditField(310,-41,80,"НДС",ViewOnly ,Sum3,true,0);// Edit ************************** Tuesday, 17 January 2017 10:37:48
  //EditField(310,-21,80,"Налог 2",ViewOnly,TAX2Sum,true,0);// Edit ************************** Tuesday, 17 January 2017 10:37:33
  EditField(180,-21,70,"Прибыль %",Normal,GPProc,true,0);// Edit ************************** Tuesday, 17 January 2017 10:37:40
  EditField(350,-41,50,"Итого: кол-во",ViewOnly ,TotQty,true,0);// Edit ************************** Tuesday, 17 January 2017 10:37:48
  EditField(350,-21,50,"Итого прибыль",ViewOnly,TotGP,true,0);// Edit ************************** Tuesday, 17 January 2017 10:37:33
  
  EditField(460,-21,75,"Осн.1",ViewOnly,BaseSum4,true,0);
  EditField(-133,-41,95,"Итого",ViewOnly ,Sum1,true,0);
  EditField(-133,-21,95,"ВСЕГО",ViewOnly ,Sum4,true,0);
  v = 22;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  Flip(0);
  MatText(t=9,32,"Итого",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Сумма",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Заголовок",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=1,32,"Товар",0,ArtCode,false,INSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  MatCol(t,160,"Кол-во",0,Quant,true,MATVARINSClass);
  EnterSkip(ArtCode);
  MatText(t=10,32,"Эта и нижележащие строки не будут печататься",false);
  Flip(1);
//  MatCol(t=1,194,"Наимен.",0,Spec,false,0);
  MatCol(t=1,190,"Наименование",0,Spec,false,0);
  MatCol(t,-150,"Цена",0,Price,true,PLSClass);
  MatCol(t,-90,"%",0,vRebate,true,0);
  MatCol(t,-60,"Сумма",0,Sum,true,0);
  Flip(2);
  MatCol(t=1,144,"Наименование",0,Spec,false,0);
  MatCol(t,-224,"Счет",0,SalesAcc,false,AccSClass);
  MatCol(t,-124,"Объект",0,Objects,false,ObjSClass);
  MatCol(t,-30,"НДС",0,VATCode,false,VATCodeSClass);
  Flip(3);
  MatCol(t=1,144,"Наименование",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-285,"Цена за шт.",0,Price,true,PLSClass);
    MatCol(t,-205,"%",0,vRebate,true,0);
    MatCol(t,-170,"Стоимость",0,BasePrice,true,0);
    MatCol(t,-70,"Прибыль",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Цена за шт.",0,Price,true,PLSClass);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Сумма",0,Sum,true,0);
  end;
  Flip(4);
  MatCol(t=1,144,"Наименование",0,Spec,false,0);
  MatCol(t,-330,"Отгрузка",0,Shipd2,true,0);
  MatCol(t,-260,"Предвар.",0,Shipd1,true,0);
  MatCol(t,-180,"Счет-фактура",0,Invd,true,0);
  MatCol(t,-80,"Структура",0,Recepy,false,RecSClass);
  Flip(5);
  MatCol(t=1,144,"Наименование",0,Spec,false,0);
  MatCol(t,-370,"Серийный номер",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"Запланированная отгрузка",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Фактор цены",0,PriceFactor,true,0);
  Flip(6);
  MatCol(t=1,144,"Наименование",0,Spec,false,0);
  MatCol(t,-315,"Накладная",0,ShipNote,false,0);
  MatCol(t,-210,"Склад",0,Location,false,LocationSClass);
  MatCol(t,-145,"Место",0,Position,true,UsedPosSClass);
  MatCol(t,-90,"Источник",0,Source,true,SourceSClass);
  Flip(7);
  MatCol(t=1,165,"Дата получения",0,PickingDate,false,PasteCurDate);
  MatCol(t,-390,"Время пол.",0,PickingTime,false,PasteCurTime);
  MatCol(t,-320,"Дата погр.",0,InloadingDate,true,PasteCurDate);
  MatCol(t,-250," Время погр.",0,InloadingTime,true,PasteCurTime);
  MatCol(t,-160,"Дата отправ.",0,DespatchRowDate,true,PasteCurDate);
  MatCol(t,-70," Время отпр.",0,DespatchRowTime,true,PasteCurTime);
  Flip(8);
  MatCol(t=1,144,"Наименование",0,Spec,false,0);
  MatCol(t,-390,"Ед.",0,UnitCode,false,UnitSClass);
  MatCol(t,-340,"Кол-во ед.",0,UnitFactQuant,true,0);
  MatCol(t,-250,"Ширина",0,UnitXval,true,0);
  MatCol(t,-190,"Высота",0,UnitYval,true,0);
  MatCol(t,-140,"Глубина",0,UnitZval,true,0);
  MatCol(t,-80,"Цена ед-ц",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h2=295,v,50,"Курс",Normal,FrRate,true,0);
  EditField(h3=360,v,50,":",Normal,ToRateB1,true,0);
  StaticText(h3+60,v+12,"Осн. валюта 1",false);
  EditField(h,v+=vs,50,"Осн. валюта 1",Normal,BaseRate1,true,0);
  EditField(h3,v,50,":",Normal,ToRateB2,true,0);
  StaticText(h3+60,v+12,"Осн. валюта 2",false);
  EditField(h,v+=vs,50,"Осн. валюта 2",Normal,BaseRate2,true,0);
  Tile(4,215,false,"4",ShipDeal);
  vs = 20;
  EditField(h=110,v=6,60,"Условие отгрузки",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h2=295,v,60,"Способ отгрузки",Normal,ShipMode,false,DMSClass);
  EditField(h3=490,v,60,"Группа продажи",Normal,SalesGroup,false,SalesGroupSClass);
  EditField(h,v+=vs,60,"Вид счета",Normal,OrderClass,false,OrderClassSClass);
  EditField(h2,v,60,"Склад",Normal,Location,false,LocationSClass);
//  EditField(h3,v,60,"Дата отправки",Normal,DespatchDate,false,0);
  EditField(h,v+=vs,60,"Проект",Normal,PRCode,false,PRSClass);
  EditField(h2,v,100,"Факторинг",Normal,InvoiceToCode,false,CUSClass);
  CheckBox(h3,v,0,"Сч/ф перед отгрузкой",InvBeforeShip);
  EditField(h,v+=vs,60,"Прейскурант",Normal,PriceList,false,PLDefSClass);
  EditField(h2,v,  -20,"Кредитная карта",Normal,CreditCard,false,CreditCardSClass);
  EditField(h,v+=vs,60,"Язык",Normal,LangCode,false,LangSClass);
  EditField(h2,v,  100,"Авторизация",Normal,AuthorizationCode,false,0);
  EditField(h,v+=vs,  60,"Таблица скидок",ViewOnly,RebCode,false,0); 
  EditField(h2,v,  100,"Подразделение",Normal,BranchID,false,AllCUSClass);
//  EditField(h2,v,60,"% скидки",ViewOnly,DiscPerc,false,0);
//  EditField(h3,v   ,-20,"Сумма скид.",ViewOnly,DiscSum,false,0);
  EditField(h,v+=vs,-20,"Комментарий",Normal,Comment,false,0);
  

  //EditField(h,v+=vs,80,"Итого: кол-во",ViewOnly,TotQty,true,0);// Edit ************************** Tuesday, 17 January 2017 10:41:43
  EditField(h,v+=vs,80,"Доп. налог",ViewOnly,TAX1Sum,true,0);// Edit ************************** Tuesday, 17 January 2017 10:40:50
  EditField(h2,v,80,"вес",ViewOnly,TotWeight,true,0);
  EditField(h3,v,80,"объем",ViewOnly,TotVolume,true,0);

  EditField(h,v+=vs,80,"Комиссия",Normal,Commision,true,0);
  EditField(h2,v,80,"Итого вкл. ком.",ViewOnly,SumIncCom,true,0);
  EditField(h3,v,-20,"Сортировка",Normal,Sorting,false,DelRouteSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    //EditField(h,v+=vs,80,"Прибыль %",Normal,GPProc,true,0);// Edit ************************** Tuesday, 17 January 2017 10:41:32
    //EditField(h2,v,80,"Итого прибыль",ViewOnly,TotGP,true,0);// Edit ************************** Tuesday, 17 January 2017 10:41:31
    EditField(h,v+=vs,80,"НДС",ViewOnly ,Sum3,true,0);// Edit ************************** Tuesday, 17 January 2017 10:41:31
    EditField(h2,v,80,"Налог 2",ViewOnly,TAX2Sum,true,0);// Edit ************************** Tuesday, 17 January 2017 10:41:30
  end;
  Tile(5,225,false,"5",Addr1); vs = 20;
  EditField(h=110,v=6,-20,"Сч/ф на",Normal,Addr1,false,0);
  EditField(h,v+=vs,-20,"адрес",Normal,Addr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,Addr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,InvAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=20),100,"Телефон",Normal,Phone,false,0);
  EditField(h,v+=20,100,"Факс",Normal,Fax,false,0);
 // v = VATZoneButtonsLabelsRUS(h2+4,v=vm+15,140,16);
  ButtonFrame(h3=520,v=vm+15,123,6,"Статус утверждения");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"не обязательно",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"не начато",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"не запрошено",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"в ожидании",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"утверждено",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"отклонено",AcceptanceStatus);  
  Tile(6,150,false,"6",ShipAddr0); vs = 20;
  EditField(h=110,v=6,-20,"Доставка",Normal,ShipAddr0,false,0);
  EditField(h,v+=vs,-20,"на адрес",Normal,ShipAddr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h,v+=vs,80,"Код доставки",Normal,DelAddrCode,false,DelAddrSClass);
  EditField(h2,v,80,"Регион",Normal,Region,false,RegionSClass); 
  EnterSkip(OrdDate);
  SpecialMenu("Поиск товара",'f',1,"ItemSearchDsm");
  SpecialMenu("Резервирования",' ',15,"OrderReservORDsm");
  SpecialMenu("Создать деятельность",'c',9,"CreateActFromORDsm");
  SpecialMenu("Создать e-mail",'m',11,"CreateMailFromORDsm");
  SpecialMenu("Создать возврат товаров",'B',6,"RetFromORsm");
  SpecialMenu("Отправить для утверждения",' ',6,"ORSendforAcceptanceORDsm");
  SpecialMenu("Создать отгрузку",'L',0,"SHFromORDsm");
  SpecialMenu("Создать перемещение по складу",' ',8,"StockMovFromORDsm");
  SpecialMenu("Создать счет-фактуру на аванс",'o',3,"DownPayFromORDsm");
  SpecialMenu("Создать счет-фактуру",'F',1,"IVFromORDsm");
  SpecialMenu("Статус счета",'r',5,"ORInfoRnORDsm");
  SpecialMenu("Статус товара",'I',2,"ItemStatusORDsm");
  SpecialMenu("Цены предыдущей продажи",' ',12,"ORLastSPrsm");
  SpecialMenu("Открыть нал. матрицу",' ',25,"OpenVatMatrixORDsm"); 
  EndWindow;
end;

window IVDClass:2
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer rn;
  
  WindowBegin("Счёт-фактура клиенту",IVDClass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(IVVc);
if (HasTouchScreenLook==false) then begin
  ActiveFieldOnNew("CustCode");
  SetWRect(20,80,750,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"Номер",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Клиент",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Наим.",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    if (HasLocalization("FIN")) then begin
      EditField(h,vm=(v+=20),180,"Payment Ref",ViewOnly,CalcFinRef,false,0);
    end else begin
      EditField(h,vm=(v+=20),135,"Офиц. Нo.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    end;
  end else begin
    v = v + 20;
    vm = v;
  end;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  TileButton(1,"Сроки");
  TileButton(2,"Товары");
  TileButton(3,"Валюта");
  TileButton(4,"Условия отгр.");
  TileButton(5,"Идентификаторы");
  TileButton(6,"Прайс-лист");
  TileButton(7,"Адрес сч/ф");
  TileButton(8,"Адрес дост.");
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Дата с/ф",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Условия оплаты",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Дата оплаты",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Дата операции",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Дата оказ. услуги",Normal,ServiceDelDate,false,PasteCurDate);  
  EditField(h2,v=vm,135,"Ответственный",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Внимание",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Объекты",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Ответственный",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"№ счета клиенту",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"Продавец",Normal,SalesMan,false,UserSClass);
  if (StandardHansa) then begin
    EditField(h3,v+=vs,80,"Склад",Normal,Location,false,LocationSClass);
  end else begin
    EditField(h3,v+=vs,80,"Проект",Normal,PRCode,false,0);
  end;
  EditField(h3,v+=vs,80,"Причина кр.сч/ф",Normal,Reason,false,StandProblemsSClass);
  if (HasLocalization("MEX")) then begin  
    EditField(h3,v+=vs,80,"Способ оплаты",Normal,PMCode,false,PMSClass);  
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h3,v+=vs,80,"Тип счёта",Normal,BrazilEInvType,false,BrazilEInvTypeSClass);
  end;
  if (HasLocalization("BOL,BRA,HRV,MEX")) then begin
    EditField(h3,v+=vs,130,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
  end;
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"No. Pay. Acc.",Normal,PayAccNo,false,0);
  end;
  if (HasLocalization("RUS")) then begin
    EditField(h3,v+=vs,-20,"К пл/рсч док-ту",Normal,ReceiptInfo,false,0);
  end;
  CheckBox(h4,v=6,0,"Спорные",DisputedFlag);
  if (StandardHansa) then begin
    CheckBox(h4,v+=16,0,"Обновить склад",UpdStockFlag);
  end;
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
  //  CheckBox(20,-20,0,"OK",OKFlag);
  if (CompileType!=ctiPhone) then begin
    EditField(55,-41,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
    if (UseTaxTemplatesforTaxCalc==false) then begin
      if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(160,-41,70,"GP %",Normal,GPProc,true,0); 
        EditField(160,-21,70,"Итого пр.ибыль",ViewOnly,TotGP,true,0);
      end;
      EditField(290,-41,70,"Налог",ViewOnly,TAX2Sum,true,0);
      EditField(290,-21,70,"Вн. нал.",ViewOnly,TAX1Sum,true,0);
      EditField(410,-41,95,"НДС",ViewOnly ,Sum3,true,0);
    end else begin
      if (UserCanAction("ViewCostPrice",true)) then begin
      //EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(290,-21,70,"Итого пр.ибыль",ViewOnly,TotGP,true,0);
      end;
      EditField(410,-41,95,"Налог",ViewOnly ,Sum3,true,0);
    end;
    EditField(410,-21,95,"База",ViewOnly,BaseSum4,true,0);
    EditField(-150,-41,95,"Подытог",ViewOnly ,Sum1,true,0);
    EditField(-150,-21,95,"Итого",ViewOnly ,Sum4,true,0);
  end else begin
    EditField(55,-41,80,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(55,-21,80,"НДС",ViewOnly ,Sum3,true,0);
    EditField(-120,-41,80,"Вн. нал.",ViewOnly,TAX1Sum,true,0);
    EditField(-120,-21,80,"Итого",ViewOnly ,Sum4,true,0);
  end;
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Товар",0,ArtCode,false,ForSaleINSClass);
  //  MatCol(t,94,"Var",0,VARList,true,VARSClass);
  //  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,150,"К-во",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"К-во",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Товар",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,94,"К-во",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"К-во",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Кредитовать сч/ф",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t);
  MatText(t=kInvoiceRowTypeDebit,32,"Дебетовать сч/ф",true);  
  MatCol(t,208,"",0,OrdRow,false,0);  
  MatCol(t,-216,"",0,Spec,false,0);  
  MatText(t=kInvoiceRowTypeInterest,32,"Пеня",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Авансовый платеж",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0);
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
  MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);         
  MatColTL(t,-140,"",0,-1,Normal,0,Sum,true,0); //?? TL?         
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Номер предоплаты",true);
  MatCol(t,208,"",0,CUPNr,false,ARPay3SClass);
  MatCol(t,-216,"",0,BasePrice,false,0); 
  MatCol(t,-170,"",0,Price,true,0);// Price holds the #VAT# sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Займ",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"% займа",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Подпись",false);
  MatColTL(t,94,"Подписать",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeVoid,32,"Отменить",false);
  MatColTL(t,65,"Подпись",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Товар",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,150,"К-во",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"К-во",0,Quant,true,0);
  end;
  MatCol(t,190,"Цена",0,Price,true,0);
  MatCol(t,250,"Описание",0,Spec,false,0);
  MatCol(t,-195,"Сер. №",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Сумма",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Итого",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Сумма",0,-1,ViewOnly,0,Sum,true,0);
  //  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"Эта строка и все последующие не выводятся на печать",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Товар",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Кво",0,Quant,true,0);
  MatText(t=kInvoiceRowTypeRetention,32,"Удержание",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"SalesAcc",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Сумма",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"ПС",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Сумма",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"ПСП",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Сумма",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"Налич.",true);
  MatCol(t,94,"Сумма",0,Sum,true,0);
  MatCol(t,198,"Способ оплаты",0,PayMode,true,PMSClass);
  MatCol(t,250,"Спец.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Сумма",0,Sum,true,0);
  MatCol(t,108,"Баллы",0,Points,true,0);
  MatCol(t,148,"Валюта",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Спец.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Баллы",0,Points,true,0);
  MatCol(t,141,"Спец.",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true);
  MatCol(t,94,"Сумма",0,Sum,true,0);
  MatCol(t,198,"Способ оплаты",0,PayMode,true,PMSClass);
  MatCol(t,250,"Спец.",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"Авторизация",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Заголовок",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType18,28,"Зарезерв.",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Зарезерв.",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Налоговые сборы",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Удерживаемый налог",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Кампания",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec",0,Spec,false,0);
  MatCol(t,-235,"Счёт дебеторов",0,SalesAcc,false,0);
  MatCol(t,-135,"Сумма",0,Sum,true,0);
  MatCol(t,-30,"НДС",0,VATCode,false,0);
  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0);
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */
  //t = 21 kInvoiceRowTypeChequePayment
  MatText(t=kInvoiceRowTypeActivationDate,32,"Дата активации:",true); 
  MatCol(t,130,"",0,ServiceDelDate,false,PasteCurDate); 
  Flip(1);
  //  MatCol(t=kInvoiceRowTypeNormal,194,"Описание",0,Spec,false,0);
  t=kInvoiceRowTypeNormal;
  MatCol(t,180,"Описание",0,Spec,false,0);
  MatCol(t,-150,"Цена",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-90,"%",0,vRebate,true,0);
  MatCol(t,-60,"Сумма",0,Sum,true,0);
  
  
  
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-235,"Цена",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-90,"%",0,vRebate,true,0);
  MatCol(t,-60,"Сумма",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Описание",0,Spec,false,0);
  MatCol(t,-150,"Цена",0,Price,true,0);
  MatCol(t,-90,"%",0,vRebate,true,0);
  MatCol(t,-60,"Сумма",0,Sum,true,0);
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,144,"Описание",0,Spec,false,0);
  MatCol(t,-360,"Счет",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-310,"Буд.пер",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Склад",0,Location,false,LocationSClass);
  MatCol(t,-180,"Место",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Объекты",0,Objects,false,ObjSClass);
    MatCol(t,-70,"НДС",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Объекты",0,Objects,false,ObjSClass);
    MatCol(t,-30,"НДС",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-360,"Счет",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-310,"Буд.пер",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Склад",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-180,"Место",0,PosCode,false,UsedPosSClass);
  end;
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Объекты",0,Objects,false,ObjSClass);
    MatCol(t,-70,"НДС",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Объекты",0,Objects,false,ObjSClass);
    MatCol(t,-30,"НДС",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  //  MatCol(t=kInvoiceRowTypePrepayment,-224,"",0,SalesAcc,false,AccSClass);
  //  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Описание",0,Spec,false,0);
  MatCol(t,-250,"Счет",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-170,"Буд.пер.",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-104,"Объекты",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"Н-код",0,TaxTemplateCode,false,TaxTemplateSClass);  
  end else begin
  	MatCol(t,-30,"НДС",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Описание",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Цена",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Ст.в осн.2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Стоим-ть",0,BasePrice,true,0);
    MatCol(t,-140,"Прибыль",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Цена",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Сумма",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Цена",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Ст.в осн.",0,BasePriceB2,true,0);
    MatCol(t,-210,"Стоим-ть",0,BasePrice,true,0);
    MatCol(t,-140,"Прибыль",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Цена",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Сумма",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Описание",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Цена",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Стоим-ть",0,BasePrice,true,0);
    MatCol(t,-140,"Прибыль",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Цена",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Сумма",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Описание",0,Spec,false,0);
  MatCol(t,-370,"Продавцы",0,Salesmen,false,UserSClass);
  MatCol(t,-300,"Серийный номер",0,SerialNr,false,SerialNrSClass);
//  MatCol(t,-250,"Main Serial No.",0,MotherNr,true,0);
  MatCol(t,-220,"П.Фактор",0,PriceFactor,true,0);
  MatCol(t,-170,"Структура",0,Recepy,false,RecSClass);  
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-310,"Сер. №",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"Фактор",0,PriceFactor,true,0);
  MatCol(t,-180,"Структура",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Коэф.",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Описание",0,Spec,false,0);
  MatCol(t,-310,"Сер. №",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"Фактор",0,PriceFactor,true,0);
  MatCol(t,-180,"Структура",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
  //  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Описание",0,Spec,false,0);
  MatCol(t,-315,"Ед-ца",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"К-во ед.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Шир.",0,UnitXval,true,0);
  MatCol(t,-160,"Выс.",0,UnitYval,true,0);
  MatCol(t,-120,"Глуб.",0,UnitZval,true,0);
  MatCol(t,-80,"Цена ед-ц",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-315,"Ед-ца",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"К-во ед.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Шир.",0,UnitXval,true,0);
  MatCol(t,-160,"Выс.",0,UnitYval,true,0);
  MatCol(t,-120,"Глуб.",0,UnitZval,true,0);
  MatCol(t,-80,"Цена ед-ц",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Описание",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Ед-ца",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"К-во ед.",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Шир.",0,UnitXval,true,0);
  MatCol(t,-160,"Выс.",0,UnitYval,true,0);
  MatCol(t,-120,"Глуб.",0,UnitZval,true,0);
  MatCol(t,-80,"Цена ед-ц",0,UnitFactPrice,true,0);
  Flip(6);
  t = kInvoiceRowTypeNormal;
  MatCol(t,144,"Описание",0,Spec,false,0);
  MatCol(t,-390,"Код товара клиента",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Коэфф.",0,Coefficient,true,0);
  MatCol(t,-260,"Цен. фактор",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"История серв. контр.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Кред. строка",0,CreditedRow,false,0);
  MatCol(t,-70,"Налог на окр. ср.",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-390,"Код товара клиента",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Коэфф.",0,Coefficient,true,0);
  MatCol(t,-260,"Цен. фактор",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"История серв. контр.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Кред. строка",0,CreditedRow,false,0);
  MatCol(t,-70,"Налог на окр. ср.",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Описание",0,Spec,false,0);
  MatCol(t,-80,"Нал.на окр.среду",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,144,"Описание",0,Spec,false,0);
  end;
  MatCol(t,-240,"ГТД",0,CustomsNr,false,0);
  MatCol(t,-100,"Страна",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Описание",0,Spec,false,0);
  MatCol(t,-240,"ГТД",0,CustomsNr,false,0);
  MatCol(t,-100,"Страна",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Описание",0,Spec,false,0);
  MatCol(t,-240,"ГТД",0,CustomsNr,false,0);
  MatCol(t,-100,"Страна",0,CountryOfOrg,false,CountrySClass);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");         
  RowMenuItem(0,"Статус товара",'I','I',0,"ItemStatusIVDsm");         
  RowMenuItem(0,"Предыдущие цены на продажу",' ',' ',0,"IVLastSPrsm");         
  RowMenuItem(0,"Добавить заголовок",' ',' ',0,"HeaderLineIVDsm");         
  RowMenuItem(0,"Добавить скрытую строку",' ',' ',0,"HiddenLineIVDsm");         
  if (HasLocalization("SVN")==false) then begin
    RowMenuItem(0,"Наличные деньги",' ',' ',0,"CashLineIVDsm");         
    RowMenuItem(0,"Кредитная карточка",' ',' ',0,"CreditCardLineIVDsm");         
  end;
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Добавить удержание",' ',' ',0,"RetentionLineIVDsm");         
  end;
  RowMenuItem(0,"Добавить подитог",' ',' ',0,"SubTotalLineIVDsm");         
  RowMenuItem(0,"Проверка статуса гарантии Apple",'w',' ',0,"WarrantyStatusIVDsm");         
  if (FileExists("hob/hmdatadef.hob")) then begin 
    RowMenuItem(0,"Доб. дату начала лицензии",' ',' ',0,"LicStartIVDsm"); 
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Основаня валюта 1",Normal,BaseRate1,true,0);  
  EditField(h,v+(vs*2),50,"Основаня валюта 2",Normal,BaseRate2,true,0);    
  EditField(h2=295,v,50,"Курс",Normal,FrRate,true,0);  
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Основаня валюта 1",false);  
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Основаня валюта 2",false);      
  Tile(4,110,false,"4",ShipDeal);  
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Условия отгрузки",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Метод доставки",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Маршрут",Normal,Sorting,false,DelRouteSClass);
    EditField(h1,v+=vs,80,"Склад",Normal,Location,false,LocationSClass);
    EditField(h1,v+=vs,80,"План. дата отпр.",Normal,PlanSendDate,false,PasteCurDate);  
    EditField(h1,v+=vs,80,"План. время отпр.",Normal,PlanSendTime,false,PasteCurTime);  
  end;
  EditField(h1,v+=vs,80,"Подразделение",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Итого кол-во",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Итого вес",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Итого объем",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Фрахт",Normal,FrPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"План. дата приб.",Normal,PlanArrDate,false,PasteCurDate);  
    EditField(h2,v+=vs,80,"План. время приб.",Normal,PlanArrTime,false,PasteCurTime);  
    EditField(h2,v+=vs,80,"Трансп. комп.",Normal,FreightCode,false,FreightCompanySClass);
    CheckBox(h3,v=vm,0,"Обновить склад",UpdStockFlag);
    EditField(h3,v+=2*vs,80,"НДС фрахта",Normal,FrVATCode,true,VATCodeSClass);
    EditField(h3,v+=vs,80,"Код транс. Интр.",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);  
    EditField(h3,v+=vs,80,"Глоб. № трансп.",Normal,GlobalTransportNr,false,0);  
    EditField(h3,v+=vs,80,"Глоб. дата трансп.",Normal,GlobalTransportDate,false,PasteCurDate);  
  end;
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Номер счета",ViewOnly,OrderNr,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Зак.на обсл.",ViewOnly,SVONr,false,0);
    EditField(h1,v+=vs,80,"№ кред.договор.",ViewOnly ,CredManNr,false,0);
  end;
  EditField(h1,v+=vs,135,"Официальный № 2",Normal,OfficialSerNr2,false,0);         
  if (HasLocalization("FIN")) then begin
    EditField(h1,v+=vs,135,"Код места доставки",Normal,DeliverySiteCode,false,0);         
    EditField(h1,v+=vs,135,"Код места работы",Normal,WorkSiteNumber,false,0);         
  end;
  if (HasLocalization("BRA")) then begin         
    EditField(h1,v+=vs,80,"Federal Service",Normal,FedServCode,false,FederalSerSClass);
  end;
  if (HasLocalization("ARG,BOL")) then begin
    EditField(h1,v+=vs,135,"CAE/CAEA",Normal,CAE,false,0); 
    EditField(h1,v+=vs,135,"CAE Expiry",Normal,CAEExpiry,false,0); 
    EditField(h1,v+=vs,70,"CAEA Start",ViewOnly,CAEAStartDate,false,0); 
  end;

  EditField(h2=350,v=vm,80,"Стат. стоимость",Normal,StatVal,true,0); 
  EditField(h2,v+=vs,80,"Время трансп.",Normal,TransTime,false,SetSClass); 
  EditField(h2,v+=vs,80,"Дата печати",ViewOnly,PrintDate,false,0); 
  //  ColourPushButton(-100,v,-20,v+60,"TestIVDClassCardData","Test" & chr(10) & "CardData",4);
  //  SoftEditField(h3+50,v,100,"Контрольный код"  ,ViewOnly ,"TaxAuthIDCC",false,0,M4Str,60);
  if (StandardHansa==false) then begin
  if (HasLocalization("ARG,BOL")) then begin
      EditField(h2,v+=vs,135,"Налогов. орган",Normal,TaxAuthID,false,0);
    EditField(h2,v+=vs,135,"Контрольн. код",ViewOnly ,TaxAuthIDCC,false,0);
    end;
    if (HasLocalization("PRT")) then begin
    EditField(h2,v+=vs,135,"Статус",Normal,Status,false,SetSClass);
    end;
    if (HasLocalization("ARG,PRT")) then begin
    EditField(h2,v+=vs,135,"Tax Type",Normal,TaxInvType,false,SetSClass); 
    end;
    if (HasLocalization("ARG")) then begin
      EditField(h2,v+=vs,70,"CAEA Expiry",ViewOnly,CAEAExpiryDate,false,0);
    end;
    if (HasLocalization("SVN")) then begin
      EditField(h2,v+=vs,180,"E-Inv. Conf. No.",ViewOnly,TaxAdminReceiptNr,false,0);
      EditField(h2,v+=vs,180,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
    end;
  end;
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Date",ViewOnly,EInvExpDate,false,0);//Tx server
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Qty",ViewOnly,EInvExpQty,false,0);
  CheckBox(h3=550,v=vm,0,"Без напоминаний",NoRemndrFlag);
  CheckBox(h3,v+=16,0,"Без пени",NoInterestFlag);
  CheckBox(h3,v+=16,0,"Без сборов",NoColectionFlag);
  CheckBox(h3,v+=16,0,"Информация о клиенте",ARonTR);
  CheckBox(h3,v+=16,0,"Не посылать как эл. сч/ф",NoEInvoice);
  if (StandardHansa==false) then begin
    CheckBox(h3,v+=16,0,"Фискальная сч/ф",FiscalFlag);
    CheckBox(h3,v+=16,0,"Счёт себе",SelfBilling);
//    CheckBox(h3,v+=16,0,"Including VAT",InclVAT);
  end;
  //  CheckBox(h3,v+=16,0,"E-Invoice Exported",EInvExpFlag);
  Tile(6,150,false,"6",PriceList); vs = 20;
  EditField(h1,v=vm,80,"Прайс-лист",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Таблица сидок",Normal,RebCode,false,0);
  //  EditField(h1,v+=vs,80,"Disc. %",ViewOnly,DiscPerc,false,0);
  //  EditField(h1,v+=vs,80,"Disc. Amount",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Грузо-чатель",ViewOnly,OrgCust,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Кредитная карта",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"Авторизация",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,80,"Счёт дебиторов",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-20,"Комментарий",Normal,InvComment,false,0);
  if (HasSalesGroup) then begin
    EditField(h2=310,v=vm,80,"Группа продаж",ViewOnly,SalesGroup,true,0);
    EditField(h2,v+=vs,80,"Язык",Normal,LangCode,false,LangSClass);
  end else begin
    EditField(h2,v=vm,80,"Язык",Normal,LangCode,false,LangSClass);
  end;
  EditField(h2,v+=vs,80,"Комиссия",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Итого вкл. ком.",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Пеня",Normal,IntCode,true,IntSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Ориг №",Normal,CredInv,false,0);
    EditField(h3,v=vm,80,"Уровень напоминания",Normal,LastRemndr,false,0);
  end else begin
    EditField(h3,v=vm,80,"Org. No.",Normal,CredInv,false,0);   // From dict
    EditField(h3,v+=vs,80,"Уровень напоминания",Normal,LastRemndr,false,0);   // From dict
  end;
  EditField(h3,v+=vs,80,"Дата посл. напомин.",Normal,LastRemDate,false,PasteCurDate);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Накопительная карта",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  end;
  EnterSkip(Math);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Прогр. лояльности",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
    EditField(h3,v+=vs,80,"Накопительные баллы",ViewOnly,Points,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v+=vs,80,"№ TREO",Normal,TREONr,false,0);
  end;
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Счёт-фактура"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Адрес"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Страна",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Банк",Normal,BankCode,false,BankSClass);
  if (StandardHansa==false) then begin
    if (HasApprovals) then begin
      SoftEditField(h3=h+4,v=(vm+=40),123,"Статус утверждения",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
/*
//oldapprovals    
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Статус утверждения");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"не обязательно",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"не начато",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"не запрошено",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"в ожидании",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"утверждено",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"отклонено",AcceptanceStatus);
*/    
    v = VATZoneButtonsLabelsrus(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsrus(h3=290,v=vm+40,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Регион",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"ИНН",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);  
  EditField(h2,v+=vs,150,"Телефон",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Факс",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Код адреса",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Отгрузка",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Отгрузка",Normal,ShipAddr0,false,0);   // From dict
  end;
  EditField(h1,v+=vs,-20,"Адрес",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Страна",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
  end;  
  EditField(h2,v,150,"GLN доставки",ViewOnly,DelRecipientGLN,false,0);  
  EnterSkip(InvDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Статус счета-фактуры",'r',2,"IVInfoIVDsm");
    SpecialMenu("Статус товара",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Открыть запись операции",'t',8,"OpenTRFromIV");
    SpecialMenu("Создать кредитовый счет-фактуру",' ',20,"CreateCreditNoteIVDsm");
    SpecialMenu("Добавить подытог",' ',12,"SubTotalLineIVDsm");
    SpecialMenu("Связать с предоплатой",' ',4,"ConnectToPrepayIVDsm");
/*not working yet
    SpecialMenu("Создать эл. письмо",'m',23,"CreateMailFromIVDsm");
*/
  end else begin
//    SpecialMenu("Статус товара",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Справка по клиенту",'e',0,"CUStatusIVDsm"); 
    SpecialMenu("Поиск товара",'f',1,"ItemSearchDsm");
    SpecialMenu("Статус счета-фактуры",'r',2,"IVInfoIVDsm");
    SpecialMenu("Добавить налог на окружающую среду",' ',19,"RepaIVsm");
    if (GuiType==kGuiiPhone) then begin
//      SpecialMenu("Подписать",' ',10,"SignIVDsm");//what is that ?  
    end;
    SpecialMenu("Пересчитать в осн. вал.1",' ',14,"SwitchToBase1IVDsm");
    SpecialMenu("Связать с предоплатой",' ',4,"ConnectToPrepayIVDsm");
    SpecialMenu("Пересчитать скидку",' ',11,"RecalcDiscountIVDsm");
    SpecialMenu("Пересчитать вес и объем",' ',10,"RecalcWeightIVDsm");
    SpecialMenu("Обновить товары валютного прейскуранта",' ',5,"UpdatePricesIVDsm");
    SpecialMenu("Распечатать кассовый ордер",' ',7,"PrintCashInOutIVDsm");
    if (HasLocalization("PRT")==false) then begin   
    SpecialMenu("Распечатать проформу счета-фактуры",' ',3,"PrintProformaIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("Отправить на фискальный принтер",' ',19,"PrintToFiscPrntIVDsm");
      SpecialMenu("Платёж кредитной картой",' ',22,"CCPayIVDsm");
      SpecialMenu("Редактировать платежи",' ',24,"EditInstalmentIVDsm");
  	end;
    if (HasLocalization("EST")) then begin         
      SpecialMenu("Повторить отправку эл. счёта",' ',21,"ResendEstEIVDsm");         
    end else begin
  	SpecialMenu("Отправить эл. сч/ф заново",' ',21,"ResendEIVDsm");
    end;
    if (HasLocalization("ARG")) then begin
      SpecialMenu("Отправить/отправить Аргентинский эл. сч/ф заново",'n',17,"SendArgEInvIVDsm");
      SpecialMenu("Retrive CAE/CAEA",'',17,"ConsultarArgEInvIVDsm");
    end;
    if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican E-Invoice",'e',17,"SendMexEInvIVDsm");
    end;
  	if (HasLocalization("BRA")) then begin
      SpecialMenu("Send/Resend Brazilian E-Invoice",' ',27,"SendBraEInvIVDsm");
    end;
    if (HasLocalization("FIN")) then begin
      SpecialMenu("Export Finvoice",' ',28,"ExportFinvoiceIVDsm");
    end;
  	SpecialMenu("Открыть запись операции",'t',8,"OpenTRFromIV");
    if (StandardHansa==false) then begin
      SpecialMenu("Утверждение скидки от менеджера",' ',24,"MgrsDiscOverrideIVDsm");         
      if (HasTaxMatrix) then begin
        SpecialMenu("Открыть матрицу налогов",' ',25,"TestVatMatrixIVDsm");         
      end;
    end;
    if (HasApprovals) then begin
      SpecialMenu("Запросить утверждение",' ',6,"IVSendforAcceptanceIVDsm"); 
      SpecialMenu("Отменить запрос утверждения",' ',2,"CancelApprovalRequestDsm"); 
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
    if (HasModCRM) then begin
//      SpecialMenu("Activity",'c',9,"CreateActFromIVDsm");
    end;
    SpecialMenu("Создать приходный ордер",' ',1,"DoCLInFromIVD");
    SpecialMenu("Создать кред. сч/ф",' ',20,"CreateCreditNoteIVDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Создать кредитный договор",' ',25,"CreateCredManIVsm");
    end;
    SpecialMenu("Создать контракт",' ',13,"COFromIVDsm");
    if (StandardHansa==false) then begin
      if (HasLocalization("PRT")==false) then begin
      SpecialMenu("Создать корректирующую счет-фактуру",' ',16,"CorrectionIVsm");
      end;
      SpecialMenu("Создать дебит ноту",' ',20,"CreateDebitNoteIVDsm");
      SpecialMenu("Создать реализацию EDI",' ',9,"DoEDIInvFromIVD");
    end;
    SpecialMenu("Создать эл. письмо",'m',23,"CreateMailFromIVDMysm");// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 27 November 2017 16:42:11
    if (HasLocalization("UKR")) then begin
      SpecialMenu("Создать первое событие",' ',18,"FirstEventIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("Создать взносы",' ',6,"CreateInstalmentsIVDsm");
        if (HasLocalization("HRV,POL,RUS,SRB,SLV,UKR")) then begin
        SpecialMenu("Создать коррекцию НДС книги продаж",' ',17,"VATCorrectionIVsm");
      end;

    //  SpecialMenu("GSXAutoEnrollmentIVDsm",'w',26,"GSXAutoEnrollmentIVDsm");

    //  SpecialMenu("TESTSendArgEInvoiceFECAESolicitar",' ',25,"TESTSendArgEInvoiceFECAESolicitar");
    //  SpecialMenu("Test Mex E-Invoices",'1',0,"TestMexEInvoices");
    end;
    SpecialMenu("Добавить клиента",' ',0,"AddCustomerIVDsm");         
    SpecialMenu("Добавить товар",' ',0,"AddItemIVDsm");           
  end;

end else begin
  date td;
  integer acnt,wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v;
  record IVVc IVr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;

  BlockLoad(LMb);

    //StopAlert(LMb.POSButtonGroup);

    wn = CurWindow;
    GetScreenSize(wn,tp,lt,bm,rt);
    switch (GuiType) begin
      case kGuiCocoa:
        bm = bm - 80;
      case kGuiWindowsDesktop:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiGDI:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
      case kGuiWPF:
        tp = tp + 30;
        bm = bm - 40;
        rt = rt - 55;
        lt = lt - 45;
    end;

    page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    if (page<1) then begin
      page = 1;
    end;
    //stopalert("about to call ReadPOSButtons, page:" & page);
    ReadPOSButtons("IVDClass",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr,acnt);
    SetWRect(lt,tp,rt,bm);
    AbsoluteWindowSize;
  if (TestEnablerFile("EnNoFullscreenWindow")==false) then begin
    FullscreenWindow;
    end;
    BrowseButtons(false);
    BrowseButtons(false);
    DynamicWindow;
    UseView(IVVc);
    ActiveFieldOnNew("ivcashcommand");
    if (GuiType!=kGuiiPhone) then begin
    ToolBar;
//    PushButton(-340,5,-340 + 34,5+18,ToolPasteSpec,"v");
    EndToolBar;
    end;

    v = 20;
    h = -300; h2 = -150; h3 = -70; h4 = -10;

    wn = CurWindow;
    if (wn>0) then begin
      switch (GetWindowClass(wn)) begin
        case "IVDClass":
          GetWindowRecord(wn,IVr);
      end;
    end;
    if (GuiType==kGuiiPhone) then begin
      if (TouchScreenLookVertical) then begin
        v = 20;
        h = -300; h2 = -150; h3 = -70; h4 = -10;

        td = IVr.TransDate;
        if (blankdate(td)) then begin td = CurrentDate; end;
        tt = IVr.TransTime;
        if (blanktime(tt)) then begin tt = CurrentTime; end;
        lmc = IVr.MachineName;
        if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
        sm = IVr.SalesMan;
        if (blank(sm)) then begin sm = CurrentUser; end;
        nr = "Invoice: ";         
        if (IVr.SerNr>0) then begin
          nr = nr & IVr.SerNr;
        end;

        if (IsEnterprise) then begin
          if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
            sessdesc = "Сессия POS открыта";         
          end else begin
            sessdesc = "*** POS закрыта ***";         
          end;
        end;

        DisplayRecordDetails_RUS(10,-100,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
          IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
          IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",         
          "",blankval,sessdesc,true,IVr.OfficialSerNr,         
          IVr.TaxAdminServSeal);

        SoftEditFieldTLX(360,-120,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);         
        SoftEditFieldTLX(360,-80,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);         

        SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);         

        DrawPOSInterface_RUS(bc1,bc2,POSBr,acnt,"",100);         
      end else begin

        v = 20;
        h = -300; h2 = -150; h3 = -70; h4 = -10;

        td = IVr.TransDate;
        if (blankdate(td)) then begin td = CurrentDate; end;
        tt = IVr.TransTime;
        if (blanktime(tt)) then begin tt = CurrentTime; end;
        lmc = IVr.MachineName;
        if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
        sm = IVr.SalesMan;
        if (blank(sm)) then begin sm = CurrentUser; end;
        nr = "Invoice: ";         
        if (IVr.SerNr>0) then begin
          nr = nr & IVr.SerNr;
        end;

        if (IsEnterprise) then begin
          if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
            sessdesc = "Сессия POS открыта";         
          end else begin
            sessdesc = "*** Сессия POS закрыта ***";         
          end;
        end;

        DisplayRecordDetails_RUS(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
          IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
          IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",         
          "",blankval,sessdesc,true,IVr.OfficialSerNr,         
          IVr.TaxAdminServSeal);


        if (bm<650) then begin
          SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);         
          SoftEditFieldTLX(360,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);         
        end else begin
          SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);         
          SoftEditFieldTLX(360,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);         
        end;

        SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);         

        DrawPOSInterface_RUS(bc1,bc2,POSBr,acnt,"",100);         
      end;
      BottomBar;
    end else begin
    td = IVr.TransDate;
    if (blankdate(td)) then begin td = CurrentDate; end;
    tt = IVr.TransTime;
    if (blanktime(tt)) then begin tt = CurrentTime; end;
    lmc = IVr.MachineName;
      if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
      sm = IVr.SalesMan;
      if (blank(sm)) then begin sm = CurrentUser; end;
    nr = "Invoice: ";
    if (IVr.SerNr>0) then begin
      nr = nr & IVr.SerNr;
    end;

    if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
      sessdesc = "Сессия POS открыта";
    end else begin
      sessdesc = "*** Сессия POS закрыта ***";
    end;

    // StopAlert("IsSessionOpen(" & IVr.MachineName & "," & IVr.DrawerCode & "," & IVr.TransDate & "," & IVr.TransTime & "); -> " & sessdesc);

    DisplayRecordDetails_RUS(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","","",blankval,sessdesc,true,IVr.OfficialSerNr,IVr.TaxAdminServSeal);

    if (bm<650) then begin
      SoftEditFieldTLX(420,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(420,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);
    end else begin
      SoftEditFieldTLX(520,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(520,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);
    end;

    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        SoftEditField(110,-22,200,"Товар/Команда"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
      case kPOSButtonsPositionRight:
        SoftEditField(-260,-22,200,"Товар/Команда"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
    end;
    SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);
    DrawPOSInterface_RUS(bc1,bc2,POSBr,acnt,"",100);
    BottomBar;
  end;
end;
  EndWindow;
end;

window PUDClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  Integer tilenr;
  Integer f,flipnr,rn;

  BlockLoad(CYb);
  WindowBegin("Поступление товаров на склад",PUDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,870,620);
  end else begin
    SetWRect(20,80,750,360);
  end;
  if (HasMultiCurrency or IsEnterprise or HasObjects) then begin
  Sizeable(-1,-1,0,0);
  end;
  UseView(PUVc);
  ActiveFieldOnNew("VECode");
  FormName(PurchaseForm);
  Tile(0,74,false,"",TransDate);
  EditField(75,vm=(v=6),95,"Номер",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Поставщик",Normal,VECode,false,VESClass);
  EnterSkip(TransDate);
  EditField(h=255,v=vm,-40,"Наим-ие",Normal,VEName,false,0);
  CheckBox(h4=-100,v+=20,0,"ОК",OKFlag);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
  CheckBox(h4,v+=16,0,"Цена вкл. НДС",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Цена вкл. НДС",InclVAT);  
  end;
  tilenr = 1;
  TileButton(tilenr,"Условия"); tilenr = tilenr + 1;
  TileButton(tilenr,"Товары"); tilenr = tilenr + 1;
  if (HasMultiCurrency) then begin
    TileButton(tilenr,"Валюта"); tilenr = tilenr + 1;
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Доп. издержки"); tilenr = tilenr + 1;
      TileButton(tilenr,"Фрахт"); tilenr = tilenr + 1;
    end;
    TileButton(tilenr,"Коммент."); tilenr = tilenr + 1;
  end;
  tilenr = 1;

  vs = 20; h1 = 110; h2 = 300; h3 = 550; h4 = -100;
  Tile(tilenr,70,false,tilenr,TransDate); tilenr = tilenr + 1;
  EditField(h1,vm=(v=6),82,"Дата опер.",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise==false) then begin
    EditField(h2,v,-20,"Коммент.",Normal,Comment,false,0);
  end;
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Склад",Normal,Location,false,LocationSClass);  
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Маршрут",ViewOnly,Sorting,false,0);  
  end;
  v = v + vs;
  SoftEditField(h1,v,82,"Скан.штрих код",Normal,"scanbarcode",false,0,M4Str,60);  
  if (HasObjects) then begin
    if (IsEnterprise) then begin
      EditField(h2,v=vm,135,"Объекты",Normal,Objects,false,ObjSClass);
    end else begin
      if (HasMultiLocations) then begin
        EditField(h2,v,135,"Объекты",Normal,Objects,false,ObjSClass);
      end else begin
        v = v + vs;
        EditField(h2,v,135,"Объекты",Normal,Objects,false,ObjSClass);  
      end;
    end;
  end;
  if (HasModPO) then begin
    if (HasObjects) then begin
      v = v + vs;
    end;
    EditField(h2,v,135,"№ заказ пост.",ViewOnly,PONr,false,0);  
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      v = v + vs;
      EditField(h2,v,135,"Контрак пост.",ViewOnly,POCOSerNr,true,POCOSClass);  
    end;
    EditField(h3,v=vm,80,"Вид заказа пост.",ViewOnly,PUClass,false,0);
  end;
  if (HasLanguages) then begin
    v = v + vs;
    EditField(h3,v,80,"Язык",Normal,LangCode,false,LangSClass);  
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    EditField(h3,v,80,"Номер там. декл.",Normal,CustomsNr,false,0);  
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    v = v + vs;
    EditField(h3,v,80,"Dispatch Number",Normal,DispatchNumber,false,0);  
  end;
//  CheckBox(h4,v=vm,0,"Price Incl. #VAT#",InclVAT);
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  if (HasSerialNumbers) then begin
    MatrixBegin(4,v,-50,-50,-,200);
  end else begin
    MatrixBegin(4,v,-25,-50,-,200);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(1,28,"Товар",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(1,130,"К-во",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,130,"К-во",0,Quant,true,0);
  end;
  EnterSkip(Spec);
  MatText(t=3,28,"Подпись",true);
  MatCol(t,100,"",0,Sign,false,0);
  MatText(t,160,"Дата исправления",true);
  MatCol(t,290,"Дата обн.",0,UpdDate,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasJewelleryInterface) then begin
    MatColTL(1,180,"Ед.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
    MatCol(1,200,"Описание",0,Spec,false,0);
    MatCol(1,-485,"Склад",0,Location,false,LocationSClass);
    MatCol(1,-430,"Серийный номер",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-320,"Тип склада",0,StockType,false,SetSClass);
  end else begin
    MatColTL(1,164,"Ед.",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
    MatCol(1,204,"Наим.",0,Spec,false,0);
  end;
  MatCol(1,-180,"Цена",0,UPrice,true,0);
  MatCol(1,-120,"Себест.",0,CostPrice,true,0);
  MatCol(1,-60,"Сумма",0,Sum,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Наим.",0,Spec,false,0);
    MatCol(1,-350,"Склад",0,Location,false,LocationSClass);
    MatCol(1,-280,"Серийный номер",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-150,"Срок годности",0,BestBefore,false,0);
    MatCol(1,-60,"Ст. партии",0,BatchStatus,false,BatchStatusSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Наим.",0,Spec,false,0);
    MatColTL(1,-404,"Стоим.товара",0,-1,ViewOnly,-1,InPrice,false,0);
    if (StandardHansa==false) then begin
      MatColTL(1,-324,"Изм.цены",0,-1,ViewOnly,-1,VarianceAmount,false,0);
      MatCol(1,-244,"Цена",0,UPrice,true,0);
      MatCol(1,-174,"Накл. расх.",0,Extra,true,0);
      MatCol(1,-104,"Стоимость",0,CostPrice,true,0);
    end else begin
      MatCol(1,-324,"Фрахт",0,ShipCost,true,0);
      MatCol(1,-244,"Доп. затраты",0,Extra,true,0);
      MatCol(1,-164,"Таможня",0,CustomsCost,true,0);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      MatCol(1,-34,"Налог",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      MatCol(1,-34,"НДС",0,VATCode,false,VATCodeSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Наим.",0,Spec,false,0);
    MatCol(1,-350,"Товар пост.",0,VEItemCode,false,PISClass);
    MatColTL(1,-270,"Ед. пост.",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
    MatCol(1,-200,"Кол.пост.",0,VEQuant,true,0);
    if (StandardHansa==false) then begin
      MatCol(1,-140,"Коэфф.",0,Coefficient,true,0);
    end;
    MatCol(1,-90,"Отпускная цена",0,BasePrice,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Наим.",0,Spec,false,0);
    if (StandardHansa==false) then begin
      MatCol(1,-400,"Тип склада",0,StockType,false,SetSClass);
    end;
    if (HasTREO) then begin
      MatCol(1,-310,"TREO",0,TREO,false,SetSClass);
    end;
    MatCol(1,-220,"Сч.склада",0,CostAcc,false,AccSClass);
    MatCol(1,-155,"Сч.покупок",0,CredAcc,false,AccSClass);
    MatCol(1,-90,"Объекты",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"ГТД.",0,CustomsNr,false,0);
      MatCol(1,-340,"Дата ГТД",0,CustomsDate,false,PasteCurDate);
      MatCol(1,-240,"Страна",0,CountryOfOrg,false,CountrySClass);
      MatCol(1,-140,"С места",0,PosCode,false,PosSClass);
      MatCol(1,-70,"На место",0,ToPosCode,false,FreePosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Наим.",0,Spec,false,0);
    MatCol(1,-250,"Сер. номер",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-135,"Ширина",0,UnitXval,true,0);
    MatCol(1,-90,"Высота",0,UnitYval,true,0);
    MatCol(1,-45,"Глуб.",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Доб.стоим.",0,Extra,true,0);
    MatCol(1,-420,"Фрахт",0,ShipCost,true,0);
    MatCol(1,-360,"Таможня",0,CustomsCost,true,0);
      label = UserDefined("AccBlock","PUCost1");
      if (blank(label)) then begin label = "Затр. 1";end;
      MatCol(1,-300,label,0,RowCost1,false,0);
      label = UserDefined("AccBlock","PUCost2");
      if (blank(label)) then begin label = "Затр. 2";end;
      MatCol(1,-240,label,0,RowCost2,false,0);
      label = UserDefined("AccBlock","PUCost3");
      if (blank(label)) then begin label = "Затр. 3";end;
      MatCol(1,-180,label,0,RowCost3,false,0);
      label = UserDefined("AccBlock","PUCost4");
      if (blank(label)) then begin label = "Затр. 4";end;
      MatCol(1,-120,label,0,RowCost4,false,0);
      label = UserDefined("AccBlock","PUCost5");
      if (blank(label)) then begin label = "Затр. 5";end;
      MatCol(1,-60,label,0,RowCost5,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"№ зак.",0,PONr,false,POSClass);
    MatCol(1,194,"Строка заказа",0,OrdRow,false,0);
    MatCol(1,-370,"Свер.зак.",0,PORecon,false,0);
    MatCol(1,-310,"Коммен.",0,POReconComment,false,0);
    MatCol(1,-200,"Свер.сч/ф",0,VIRecon,false,0);
    MatCol(1,-130,"Коммен.",0,VIReconComment,false,0);
  end else begin
    if (HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Описание",0,Spec,false,0);
      MatCol(1,-150,"Сер. номер",0,SerialNr,false,SerialNrSClass);
    end;
/*
    MatCol(1,-280,"Цена ед.",0,UPrice,true,0);
    MatCol(1,-210,"Фрахт",0,ShipCost,true,0);
    MatCol(1,-140,"Доп. затраты",0,Extra,true,0);
    MatCol(1,-70,"Стоимость",0,CostPrice,true,0);
*/
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Описание",0,Spec,false,0);
    MatCol(t,-250,"Номер отправки",0,DispatchNumber,false,0);
  end;
  if (HasJewelleryInterface) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Описание",0,Spec,false,0);
    MatCol(t,-350,"Пост. сер. номер",0,SuppSerialNr,true,0);
    MatCol(t,-200,"Метал",0,Metal,true,0);
    MatCol(t,-150,"Вес",0,RowWeight,true,0);
    MatCol(t,-100,"Размер",0,Size,true,0);
    MatCol(t,-50,"Длина",0,Length,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Описание",0,Spec,false,0);
    MatCol(t,-350,"Осн. камень",0,MajStoneDet,true,0);
    MatCol(t,-250,"Цвет",0,Colour,true,0);
    MatCol(t,-200,"Прозрачность",0,Clarity,true,0);
    MatCol(t,-150,"Серт.",0,Cert,true,0);
    MatCol(t,-100,"Мин. камень",0,MinStoneDet,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Описание",0,Spec,false,0);
    MatCol(t,-400,"Марка часов",0,WatchBrand,true,0);
    MatCol(t,-300,"Наим. стиля",0,StyleName,true,0);
    MatCol(t,-200,"Метал часов",0,WatchMetal,true,0);
    MatCol(t,-100,"Движение",0,Movement,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Описание",0,Spec,false,0);
    MatCol(t,-400,"Брк/Стр",0,BrcStr,true,0);
    MatCol(t,-300,"Род",0,Gender,true,0);
    MatCol(t,-200,"Проч.",0,Other,true,0);
    MatCol(t,-100,"Проч. 2",0,Other2,true,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");         
  if (StandardHansa==false) then begin
    if (HasSerialNumbers) then begin
      RowMenuItem(0,"Открыть общую спецификацию",' ',' ',0,"OpenBatchPUDsm");         
    end;
    RowMenuItem(0,"Разделить строку",' ',' ',0,"SplitRowPUDsm");         
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  EditField(110,-41,70,"Итого кол-во",ViewOnly,SumQuant,true,0);
//  EditField(110,-21,70,"Price Subtotal",Normal,SubTotal,true,0); //Shows the same as SumCostPrice?
  EditField(260,-41,70,"Фрахт",Normal,ShipCost,true,0);
  if (IsEnterprise) then begin
    EditField(260,-21,70,"Таможня",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
  EditField(410,-41,70,"НДС",Normal,VATVal,true,0);
  if (HasExtTax) then begin
    EditField(410,-21,70,"Вн. налог",ViewOnly,TAX1Sum,true,0);
    end;
  end else begin
    EditField(410,-41,70,"НДС",Normal,VATVal,true,0);  
  end;
  EditField(-169,-41,118,"Подытог",ViewOnly,SumCostPrice,true,0);
  EditField(-169,-21,118,"ИТОГО",ViewOnly,PayVal,true,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Осноная валюта 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Осн. валюта",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Осноная валюта 2",Normal,BaseRate2,true,0);  
      end;
      EditField(h2=295,v,50,"Курс",Normal,FrRate,true,0);  
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Осноная валюта 1",false);  
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Осноная валюта 2",false);            
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Осноная валюта",false);      
      end;
    end else begin
      EditField(h1,v+=vs,50,"Осноная валюта 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Осноная валюта 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,120,false,tilenr,Cost1); tilenr = tilenr + 1;
    vs = 20;
    label = UserDefined("AccBlock","PUCost1");
    if (blank(label)) then begin label = "Накл. расходы 1";end;
    EditField(h=110,v=6,70,label,Normal,Cost1,false,0);
    label = UserDefined("AccBlock","PUCost2");
    if (blank(label)) then begin label = "Накл. расходы 2";end;
    EditField(h2=295,v,70,label,Normal,Cost2,false,0);
    label = UserDefined("AccBlock","PUCost3");
    if (blank(label)) then begin label = "Накл. расходы 3";end;
    EditField(h,v+=vs,70,label,Normal,Cost3,false,0);
    label = UserDefined("AccBlock","PUCost4");
    if (blank(label)) then begin label = "Накл. расходы 4";end;
    EditField(h2,v,70,label,Normal,Cost4,false,0);
    label = UserDefined("AccBlock","PUCost5");
    if (blank(label)) then begin label = "Накл. расходы 5";end;
    EditField(h,v+=vs,70,label,Normal,Cost5,false,0);
    if (HasApprovals) then begin
      SoftEditField(h2,v,123,"Статус утвержд.",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
    ButtonFrame(h3=400,v=16,130,2,"Расчет накл. затрат");
    RadioButton(h3,v,0,0,"Стоимость",ExtraCostsCalculation);
    RadioButton(h3,v+=16,1,0,"Вес",ExtraCostsCalculation);
/*
//oldapprovals  
    ButtonFrame(h3=-163,v=16,123,6,"Статус утверждения");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"не обязательно",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"не начато",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"не запрошено",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"в ожидании",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"утверждено",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"отклонено",AcceptanceStatus);
*/    
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Трансп. компания",Normal,FreightCode,false,FreightCompanySClass);
    EditField(h1,v+=vs,-20,"Наим.",Normal,FreightCompany,false,0);
    EditField(h1,v+=vs,-20,"ИНН",Normal,FreightCompanyRegNr,false,0);
    EditField(h1,v+=vs,-20,"Инф. о машине",Normal,TruckInfo,false,0);
    EditField(h1,v+=vs,-20,"Водитель",Normal,Driver,false,0);
    EditField(h1,v+=vs,-20,"ТТН",Normal,CMRText,false,0); // International transporting number
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Коммент.",Normal,Comment,false,0);
  end;
  if (StandardHansa==true) then begin
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Коммент.",Normal,Comment,false,0);   // From dict
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Статус поступления",'r',4,"PUStatusDsm");
    SpecialMenu("Генерировать серийные номера",' ',2,"GenSerialNosPUDsm");
    if (HasModNL) then begin
      SpecialMenu("Открыть запись операции",'t',4,"OpenTRFromPU");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
    if (HasModPL) then begin
      SpecialMenu("Создать счет-фактуру поставщика",'F',3,"VIFromPUDsm");
    end;
    if (HasRetGoodsToSupp and HasModIN) then begin
      SpecialMenu("Возврат товара поставщику",'B',7,"RetPUFromPUDsm");
    end;
  end else begin
  if (IsEnterprise) then begin
    SpecialMenu("Поиск товара",'f',1,"ItemSearchDsm");
    SpecialMenu("Статус поступления",'r',4,"PUStatusDsm");
  end;
  if (HasSerialNumbers) then begin
    SpecialMenu("Генерировать серийные номера",' ',2,"GenSerialNosPUDsm");
  end;
  if (HasModNL) then begin
    SpecialMenu("Открыть запись операции",'t',4,"OpenTRFromPU");
  end;
  if (HasTaxMatrix) then begin
    SpecialMenu("Открыть нал. матрицу",' ',25,"OpenVatMatrixPUDsm");
  end;
  SpecialMenu("Распечатать этикетки",'e',0,"PrintPULabPUDsm");
    SpecialMenu("Обновить цены",' ',1,"UpdatePricesPUDsm");

  if (HasModWHM) then begin
    SpecialMenu("Подтвердить складские перемещения",' ',9,"OKStockMovPUrDsm"); 
  end;
  if (HasLocalization("HRV")) then begin         
    SpecialMenu("Расчёт цен по продажам",' ',8,"SPCHRVPUDsm");         
  end;
  if (HasApprovals) then begin
    SpecialMenu("Запросить утверждение",' ',6,"PUSendforAcceptancePUDsm"); 
    SpecialMenu("Отменить запрос утверждения",' ',2,"CancelApprovalRequestDsm"); 
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
  if (HasModPL) then begin
    SpecialMenu("Создать счет-фактуру поставщика",'F',3,"VIFromPUDsm");
  end;
  if (HasQualityControl) then begin
    SpecialMenu("Контроль качества",'u',10,"QualConFromPUDsm");
//  SpecialMenu("Update Mark",' ',6,"UpdateMarkPUDsm");
  end;
  if (HasAdvancedStock or (HasLocalization("PRT") and HasModIN) or (HasRetGoodsToSupp and HasModIN)) then begin
    SpecialMenu("Возврат товара поставщику",'B',7,"RetPUFromPUDsm");
  end;
  if (HasModRent) then begin
//  SpecialMenu("Создать перемещение на складе",' ',5,"StockMovFromPUSpec");
//  SpecialMenu("Scan",' ',8,"ScanBarCodePUDsm");
    SpecialMenu("Создать складское перемещение",' ',8,"INTransFromPUsm");
  end;
    SpecialMenu("Добавить поставщика",' ',0,"AddSupplierPUDsm"); 
    SpecialMenu("Добавить товар",' ',0,"AddItemPUDsm");     
  end;
  EndWindow;
end;


window RetDClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  Integer tilenr,flipnr;
  
  WindowBegin("Возврат товаров от клиента",RetDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(RetVc);
  ActiveFieldOnNew("CustCode");
  Tile(0,74,false,"",TransDate);
  v = 6; vs = 20;
  EditField(75,vm=(v=6),95,"№",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Клиент",Normal,CustCode,false,CUSClass);
  EditField(h=275,v=vm,-40,"Наимен.",Normal,CustName,false,0);
  if (HasOfficialSerNr) then begin
    EditField(h,vm=(v+=20),135,"Оф. номер",Normal,OfficialSerNr,false,LegalInvNrSClass);
  end;
//  EditField(h+210,v,82, "Employee",Normal,EMCode,false,UserSClass);
  CheckBox(h4=-100,v,0,"ОК",OKFlag);
  tilenr = 1;
  TileButton(tilenr,"Условия"); tilenr = tilenr + 1;
  TileButton(tilenr,"Товары"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Валюта"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Комментарий"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,Location); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -110;
  EditField(h1,vm=(v=6),82,"Дата",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    EditField(h1,v+=vs,82,"Склад",Normal,Location,false,LocationSClass);
  end;
  EditField(h1,v+=vs,82,"Причина",Normal,Reason,false,StandProblemsSClass);
  if (HasObjects) then begin
    EditField(h1,v+=vs,82,"Объекты",Normal,Objects,false,ObjSClass);
  end;
  EditField(h2,v=vm,135,"Номер счета",ViewOnly,OrdNr,false,0);
  EditField(h2,v+=vs,135,"Номер отгр.",ViewOnly,SHNr,false,0);
  if (HasModSVO) then begin
    EditField(h2,v+=vs,135,"№ зак. на обсл.",ViewOnly,SVONr,false,0);
    EditField(h2,v+=vs,135,"№ табл. работ",ViewOnly,WSNr,false,0);
  end;
  EnterSkip(Math);
  ButtonFrame(h3=h3-70,v=vm+10,140,2,"Уменьшить количество");
  RadioButton(h3,v,0,0,"Только отгруженные",Type);
  RadioButton(h3,v+=16,1,0,"Заказанные и отгруж.",Type);
  CheckBox(h4,v=vm+10,0,"Обновить склад",UpdStockFlag);
  CheckBox(h4,v+=16,0,"Цена вкл. НДС",InclVAT);
  CheckBox(h4,v+=16,0,"Без кр. сч/ф",Closed);
  Tile(tilenr,79,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  flipnr = 1;
  MatrixBegin(4,v,-50,-22,-,199);
  Flip(0);
  MatCol(1,32,"Товар",0,ArtCode,false,ForSaleINSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Qty",0,Quant,true,0);
  MatCol(1,150,"К-во",0,Quant,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(1,194,"Описание",0,Spec,false,0);
  MatCol(1,180,"Наимен.",0,Spec,false,0);
  MatCol(1,-180,"Цена",0,UPrice,true,0);
  MatCol(1,-120,"Накладные расходы",0,Extra,true,0);
  MatCol(1,-60,"Стоимость",0,CostPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasObjects) then begin
  MatCol(1,134,"Объекты",0,Objects,false,ObjSClass);
  end;
  if (HasMultiLocations) then begin
    MatCol(1,264,"Сч/ф",0,Invd,false,0);
    MatColTL(1,-300,"Склад",0,M4UStr,ViewOnly,0,Location,false,0);
  end else begin
    MatCol(1,-300,"Сч/ф",0,Invd,false,0);
  end;
  if (HasModNL) then begin
  MatColTL(1,-240,"Счёт склада",0,M4UStr,ViewOnly,0,CostAcc,false,AccSClass);
  end;
  if (HasSerialNumbers) then begin
  MatCol(1,-180,"Серийный №",0,SerialNr,false,SerialNrSClass);
  MatCol(1,-80,"Срок годности",0,BestBefore,false,0);
  end;
  if (HasObjects or HasBuyBack or HasPositions) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  if (HasObjects) then begin
    MatCol(1,144,"Объекты",0,Objects,false,ObjSClass);
  end;
  if (HasBuyBack) then begin
    MatCol(1,-380,"Стоим. обратной закупки",0,BBCostPrice,false,0);
  end;
  if (HasPositions) then begin
    MatCol(1,-300,"Место",0,PosCode,false,FreePosSClass);
  end;
    if (IsEnterprise) then begin
  MatColTL(1,-240,"Структура",0,M4Ustr,ViewOnly,0,Recepy,false,0);
  MatCol(1,-180,"Ширина",0,UnitXval,true,0);
  MatCol(1,-120,"Высота",0,UnitYval,true,0);
  MatCol(1,-60,"Глубина",0,UnitZval,true,0);
    end;
  end;
  if (HasModSVO) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Описание",0,Spec,false,0);
    MatCol(1,-225,"Тип товара",0,WSIVType,false,SetSClass);
    if (HasSerialNumbers) then begin
      MatCol(1,-150,"Осн. серийн. номер",0,MotherNr,false,SerialNrSClass);
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");         
  if (HasQualityControl) then begin
    RowMenuItem(0,"Контроль качества",'u','u',0,"QualConFromRetDsm");         
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  if (HasObjects or HasBuyBack or HasPositions) then begin
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  end;
  if (HasModSVO) then begin
    v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  end;
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(110,-20,50,"Total Qty",ViewOnly,SumQuant,true,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
  vs = 20;
  EditField(h1,v=6,50,"Валюта",Normal,CurncyCode,false,CurncyCodeSClass);
  if (HasMultiCurrency) then begin
    if (HasBase2) then begin
      EditField(h1,v+vs,50,"Осноная валюта 1",Normal,BaseRate1,true,0);
    end else begin
      EditField(h1,v+vs,50,"Осноная валюта",Normal,BaseRate1,true,0);
    end;
    if (HasBase2) then begin  
      EditField(h1,v+(vs*2),50,"Осноная валюта 2",Normal,BaseRate2,true,0);  
    end;
    EditField(h2=295,v,50,"Курс",Normal,FrRate,true,0);  
    if (HasBase2) then begin  
      RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Осноная валюта 1",false);  
      RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Осноная валюта 2",false);            
    end else begin
      RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Осноная валюта",false);      
    end;
  end else begin
    EditField(h1,v+=vs,50,"Осноная валюта 1",Normal,BaseRate1,true,0);
    EditField(h1,v+=vs,50,"Осноная валюта 2",Normal,BaseRate2,true,0);
  end;
  end;
  Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
  EditField(h1,v=6,-20,"Комментарий",Normal,Comment,false,0);
  if (HasNumberSeries and HasLocalization("PRT")) then begin  
    if (HasOfficialSerNr) then begin
      EditField(h1,v+=vs,100,"Official Ser No. 2",Normal,OfficialSerNr2,false,0);  
      EditField(h2,v,135,"Статус",Normal,Status,false,SetSClass);  
    end;    
  end;
  SpecialMenu("Поиск товара",'f',1,"ItemSearchDsm");
  if (HasModNL) then begin
    SpecialMenu("Открыть запись операции",'t',0,"OpenTRFromRet");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);         
  SpecialMenu("Выписать кредитный счет",'F',1,"CreditIVFromRetsm");
  EndWindow;
end;

window RecDClass:1
  wtag("language","RUS"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vm,vs;
  WindowBegin("Структура",RecDClass,CGview,-);
  SetWRect(20,80,600,340);
  Sizeable(-1,-1,0,0);
  UseView(RecVc);
  FormName(RecForm);
  vs = 20;
  h = 130; h2 = 350; h3 = 570;
  EditField(h,v=10,100,"Код",St_i,Code,false,0);
    EditField(h2,v,-40,"Комментарий",Normal,Comment,false,0);
  if (HasAdvancedProduction) then begin
    EditField(h,v+=vs,85,"Норм.произв.кол.",Normal,NormProdQty,true,0);
    EditField(h2,v,85,"Время на устан.",Normal,SetUpTime,true,0);
    EditField(h3,v,85,"Язык",Normal,LangCode,true,LangSCLass);
    EditField(h,v+=vs,85,"Мин.произ.кол.",Normal,MinProdQty,true,0);
    EditField(h2,v,85,"Дней на сборку",Normal,QtyAssemblyDays,true,0);
  end;
  if (IsStandardProduct) then begin
    CheckBox(h3,v+=vs,0,"Закрыта",Closed); 
  end else begin
  CheckBox(h3,v,0,"Закрыта",Closed);
  end;
  if (HasAdvancedProduction) then begin
    EditField(h,v+=vs,85,"Дней на произв.",Normal,FixedAssembDays,true,0);
  //  EditField(h,v+=vs,85,"In Item Scale",Normal,Scale,false,0);
    EditField(h2,v,85,"Часов на произв.",Normal,HrsToProd,true,0);
    EditField(h2+160,v,50,"Минут",Normal,MinsToProd,true,0);
    EditField(h2+280,v,50,"Секунд",Normal,SecsToProd,true,0);
    EditField(h,v+=vs,85,"Цвет в упр. ресур.",Normal,ResMgrColNr,false,SetSClass);
    EditField(h2,v,85,"Произв. кол-во",Normal,NumProd,true,0);
    EditField(h,v+=vs,85,"Станд. партия",Normal,StdBatch,true,0);
    EditField(h2,v,85,"Доп. произв. кол-во",Normal,ExtraProdQty,false,0);
    EditField(h,v+=vs,85,"Маршрут по умолч.",Normal,DefaultRouting,false,RoutingSClass);
    EditField(h,v+=vs,-40,"Инструкции",Normal,Instr0,false,0);
    EditField(h,v+=vs,-40,"",Normal,Instr1,false,0);
    EditField(h,v+=vs,-40,"",Normal,Instr2,false,0);
  end;
  CheckBox(30,-21,0,"Заблокирована",OKFlag);
  EnterSkip(Math);
  h=4; v=v+(vs+17);
  MatrixBegin(4,v,-50,-49,-,300);
  InsertRowTest;
  DeleteRowTest;
  vm = v;
  Flip(0);
  MatCol(1,30,"Товар",0,Item,false,INSClass);
  MatCol(1,154,"Наименование",0,Comment,false,0);
  Flip(1);
  MatCol(1,-240,"Расход",0,InQty,true,MATVARINSClass);
  MatCol(1,-200,"Вып.",0,OutQty,true,MATVARINSClass);
  MatCol(1,-160,"Ед. изм.",0,Unittext,false,UnitSClass);
  if (HasAdvancedProduction) then begin
    MatCol(1,-120,"% ст-ти",0,RelVal,true,0);
  end;
  MatCol(1,-80,"Ст-ть",0,ItemCost,true,0);
  if (HasAdvancedProduction) then begin
    MatCol(1,-40,"Труд.",0,ExtraCost,true,0);
  end;
  if (HasAdvancedProduction) then begin
    Flip(2);
    MatCol(1,-400,"Описание",0,Desc,false,0);
    MatCol(1,-240,"Материал",0,Material,false,MaterialSClass);
    MatCol(1,-100,"Структура",0,Recipe,false,SetSClass); // Bad name for field, will be confused with the Recepy of the item
  end;
  EndMatrix;
  vs = 20;
  if (HasAdvancedProduction) then begin
    VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
    v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  end;
  EditField(-370,  -21,85,"Затраты на компоненты ",ViewOnly,InSum,true,0);
  EditField(-150,  -21,85,"Сумма на выходе",ViewOnly,OutSum,true,0);
  if (HasAdvancedProduction) then begin
    SpecialMenu("Открыть альтернативу производимому товару",' ',0,"RecShowMachineDsm");
  end;
  SpecialMenu("Поиск товара",'f',1,"ItemSearchDsm");
  EndWindow;
end;